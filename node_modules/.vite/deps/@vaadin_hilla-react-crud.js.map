{
  "version": 3,
  "sources": ["../../@vaadin/hilla-react-crud/src/autogrid.tsx", "../../@vaadin/hilla-react-crud/src/autogrid-column-context.tsx", "../../@vaadin/hilla-react-crud/src/autogrid-renderers.tsx", "../../@vaadin/hilla-react-crud/src/locale.ts", "../../@vaadin/hilla-react-crud/src/util.tsx", "../../validator/es/lib/util/assertString.js", "../../validator/es/lib/alpha.js", "../../validator/es/lib/isNumeric.js", "../../validator/es/lib/isBoolean.js", "../../validator/es/lib/isIP.js", "../../validator/es/lib/isFloat.js", "../../@vaadin/hilla-lit-form/src/Validators.ts", "../../@vaadin/hilla-lit-form/src/Models.ts", "../../@vaadin/hilla-lit-form/src/Validity.ts", "../../@vaadin/hilla-lit-form/src/BinderNode.ts", "../../@vaadin/hilla-lit-form/src/Field.ts", "../../@vaadin/hilla-lit-form/src/Validation.ts", "../../@vaadin/hilla-lit-form/src/BinderRoot.ts", "../../@vaadin/hilla-lit-form/src/index.ts", "../../@vaadin/hilla-react-crud/src/header-filter.tsx", "../../@vaadin/hilla-react-crud/src/types/com/vaadin/hilla/crud/filter/PropertyStringFilter/Matcher.ts", "../../@vaadin/hilla-react-crud/src/autogrid-columns.tsx", "../../@vaadin/hilla-react-crud/autogrid.obj.js", "../../@vaadin/hilla-react-crud/src/data-provider.ts", "../../@vaadin/hilla-react-crud/src/types/org/springframework/data/domain/Sort/Direction.ts", "../../@vaadin/hilla-react-crud/src/types/org/springframework/data/domain/Sort/NullHandling.ts", "../../@vaadin/hilla-react-crud/src/header-sorter.tsx", "../../@vaadin/hilla-react-crud/src/model-info.ts", "../../@vaadin/hilla-react-crud/src/autogrid-feature.ts", "../../../../../../../opt/agent/work/1af72d8adc613024/hilla/packages/ts/react-form/src/index.ts", "../../@vaadin/hilla-react-crud/src/autoform.tsx", "../../@vaadin/hilla-react-crud/src/autoform-field.tsx", "../../@vaadin/hilla-react-crud/autoform.obj.js", "../../@vaadin/hilla-react-crud/src/autoform-feature.ts", "../../@vaadin/hilla-react-crud/src/autocrud.tsx", "../../@vaadin/hilla-react-crud/src/autocrud-dialog.tsx", "../../@vaadin/hilla-react-crud/autocrud.obj.js", "../../@vaadin/hilla-react-crud/src/media-query.ts", "../../@vaadin/hilla-react-crud/src/autocrud-feature.ts", "../../@vaadin/hilla-react-crud/src/index.ts"],
  "sourcesContent": ["import type { AbstractModel, DetachedModelConstructor } from '@vaadin/hilla-lit-form';\nimport { Grid, type GridElement, type GridProps } from '@vaadin/react-components/Grid.js';\nimport { GridColumn } from '@vaadin/react-components/GridColumn.js';\nimport { GridColumnGroup } from '@vaadin/react-components/GridColumnGroup.js';\nimport {\n  cloneElement,\n  type ComponentType,\n  type ForwardedRef,\n  forwardRef,\n  type JSX,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { ColumnContext, CustomColumnContext, type SortState } from './autogrid-column-context.js';\nimport { type ColumnOptions, getColumnOptions } from './autogrid-columns.js';\nimport { AutoGridFooterItemCountRenderer, AutoGridRowNumberRenderer, FooterContext } from './autogrid-renderers.js';\nimport css from './autogrid.obj.js';\nimport type { ListService } from './crud.js';\nimport { createDataProvider, type DataProvider, isCountService, type ItemCounts } from './data-provider.js';\nimport { type HeaderFilterRendererProps, NoHeaderFilter, HeaderFilterWrapper } from './header-filter';\nimport { HeaderSorter } from './header-sorter';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport type AndFilter from './types/com/vaadin/hilla/crud/filter/AndFilter.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\nimport { isFilterEmpty, registerStylesheet } from './util';\n\nregisterStylesheet(css);\n\nexport interface AutoGridRef<TItem = any> {\n  /**\n   * The underlying vaadin-grid DOM element.\n   */\n  grid: GridElement<TItem> | null;\n\n  /**\n   * Refreshes the grid by reloading the data from the backend.\n   */\n  refresh(): void;\n}\n\ninterface AutoGridOwnProps<TItem> {\n  /**\n   * The service to use for fetching the data. This must be a TypeScript service\n   * that has been generated by Hilla from a backend Java service that\n   * implements the `com.vaadin.hilla.crud.ListService` interface.\n   */\n  service: ListService<TItem>;\n  /**\n   * The entity model to use for the grid, which determines which columns to\n   * show and how to render them. This must be a Typescript model class that has\n   * been generated by Hilla from a backend Java class. The model must match\n   * with the type of the items returned by the service. For example, a\n   * `PersonModel` can be used with a service that returns `Person` instances.\n   *\n   * By default, the grid shows columns for all properties of the model which\n   * have a type that is supported. Use the `visibleColumns` option to customize\n   * which columns to show and in which order.\n   */\n  model: DetachedModelConstructor<AbstractModel<TItem>>;\n  /**\n   * The property to use to detect an item's ID. The item ID is used to keep\n   * the selection state when reloading the grid.\n   *\n   * By default, the component uses the property annotated with\n   * `jakarta.persistence.Id`, or a property named `id`, in that order.\n   * This option can be used to override the default behavior, or define the ID\n   * property in case a class doesn't have a property matching the defaults.\n   */\n  itemIdProperty?: string;\n  /**\n   * Allows to provide a filter that is applied when fetching data from the\n   * service. This can be used for implementing an external filter UI outside\n   * the grid. A custom filter is not compatible with header filters.\n   *\n   * **NOTE:** This is considered an experimental feature and the API may change\n   * in the future.\n   */\n  experimentalFilter?: FilterUnion;\n  /**\n   * Allows to customize which columns to show and in which order. This must be\n   * an array of property names that are defined in the model. Nested properties\n   * can be specified using dot notation, e.g. `address.street`.\n   */\n  visibleColumns?: string[];\n  /**\n   * Allows to customize which columns to hide. This must be an array of property\n   * names that are defined in the model. Nested properties can be specified using\n   * dot notation, e.g. `address.street`.\n   */\n  hiddenColumns?: string[];\n  /**\n   * Disables header filters, which are otherwise enabled by default.\n   */\n  noHeaderFilters?: boolean;\n  /**\n   * Allows to add custom columns to the grid. This must be an array of\n   * `GridColumn` component instances. Custom columns are added after the\n   * auto-generated columns.\n   */\n  customColumns?: JSX.Element[];\n  /**\n   * Allows to customize the props for individual columns. This is an object\n   * where the keys must be property names that are defined in the model, and\n   * the values are props that are accepted by the `GridColumn` component.\n   * Nested properties can be specified using dot notation, e.g.\n   * `address.street`.\n   */\n  columnOptions?: Record<string, ColumnOptions>;\n  /**\n   * When enabled, inserts a column with row numbers at the beginning of the\n   * grid.\n   */\n  rowNumbers?: boolean;\n  /**\n   * When enabled, shows the total count of items in the grid footer.\n   * This requires the provided service to implement the CountService interface,\n   *  otherwise an error will be logged to the console, without any count being\n   *  rendered.\n   */\n  totalCount?: boolean;\n  /**\n   * When enabled, shows the filtered item count in the grid footer.\n   * if totalCount is also enabled, it will show both totalCount and filteredCount.\n   * This requires the provided service to implement the CountService interface,\n   *  otherwise an error will be logged to the console, without any count being\n   *  rendered.\n   */\n  filteredCount?: boolean;\n  /**\n   * Allows to customize the grid footer with a custom renderer component for\n   *  the total count and filtered item count.\n   * This requires the provided service to implement the CountService interface,\n   * See {@link AutoGrid#totalCount} and {@link AutoGrid#filteredCount}.\n   */\n  footerCountRenderer?: ComponentType<ItemCounts>;\n}\n\nexport type AutoGridProps<TItem> = GridProps<TItem> & Readonly<AutoGridOwnProps<TItem>>;\n\ninterface ColumnConfigurationOptions {\n  visibleColumns?: string[];\n  hiddenColumns?: string[];\n  noHeaderFilters?: boolean;\n  customColumns?: JSX.Element[];\n  columnOptions?: Record<string, ColumnOptions>;\n  rowNumbers?: boolean;\n  totalCount?: boolean;\n  filteredCount?: boolean;\n  footerCountRenderer?: ComponentType<ItemCounts>;\n  itemCounts?: ItemCounts;\n}\n\nfunction wrapCustomColumn(\n  column: JSX.Element,\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n  options: ColumnConfigurationOptions,\n) {\n  const key = column.key ?? 'no-key';\n  const { header, headerRenderer } = column.props;\n  const customOptions = options.columnOptions?.[key];\n  const { header: customHeader, headerRenderer: customHeaderRenderer, headerFilterRenderer } = customOptions ?? {};\n  const columnWithoutHeader = cloneElement(column, {\n    header: null,\n    headerRenderer: HeaderFilterWrapper,\n  });\n  return (\n    <CustomColumnContext.Provider\n      key={key}\n      value={{\n        setColumnFilter,\n        headerFilterRenderer: headerFilterRenderer ?? NoHeaderFilter,\n        filterKey: key,\n      }}\n    >\n      <GridColumnGroup\n        key={key}\n        header={customHeader ?? header}\n        headerRenderer={customHeaderRenderer ?? headerRenderer}\n      >\n        {columnWithoutHeader}\n      </GridColumnGroup>\n    </CustomColumnContext.Provider>\n  );\n}\n\nfunction addCustomColumns(\n  columns: JSX.Element[],\n  options: ColumnConfigurationOptions,\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n): JSX.Element[] {\n  if (!options.customColumns) {\n    return columns;\n  }\n\n  // When using header filters, wrap custom columns into column groups and\n  // move header text or renderer to group\n  const customColumns = options.noHeaderFilters\n    ? options.customColumns\n    : options.customColumns.map((column) => wrapCustomColumn(column, setColumnFilter, options));\n\n  // When using a custom column order, insert custom columns into auto-generated\n  // ones using their `key`\n  if (options.visibleColumns) {\n    const columnMap = [...columns, ...customColumns].reduce((map, column) => {\n      const { key } = column;\n      if (key) {\n        map.set(key, column);\n      }\n      return map;\n    }, new Map<string, JSX.Element>());\n\n    return options.visibleColumns.map((path) => columnMap.get(path)).filter(Boolean) as JSX.Element[];\n  }\n\n  // Otherwise just append custom columns at the end\n  return [...columns, ...customColumns];\n}\n\nfunction useColumns(\n  properties: PropertyInfo[],\n  setColumnFilter: (filter: FilterUnion, filterKey: string) => void,\n  options: ColumnConfigurationOptions,\n) {\n  const sortableProperties = properties.filter(\n    (propertyInfo) => options.columnOptions?.[propertyInfo.name]?.sortable !== false,\n  );\n  const [sortState, setSortState] = useState<SortState>(\n    sortableProperties.length > 0 ? { [sortableProperties[0].name]: { direction: 'asc' } } : {},\n  );\n  let columns = properties.map((propertyInfo) => {\n    let column;\n    const customColumnOptions = options.columnOptions?.[propertyInfo.name];\n\n    const { headerFilterRenderer, ...columnProps } = getColumnOptions(propertyInfo, customColumnOptions);\n\n    if (!options.noHeaderFilters) {\n      column = (\n        <GridColumnGroup headerRenderer={HeaderSorter}>\n          <GridColumn path={propertyInfo.name} headerRenderer={HeaderFilterWrapper} {...columnProps}></GridColumn>\n        </GridColumnGroup>\n      );\n    } else {\n      column = <GridColumn path={propertyInfo.name} headerRenderer={HeaderSorter} {...columnProps}></GridColumn>;\n    }\n    return (\n      <ColumnContext.Provider\n        key={propertyInfo.name}\n        value={{\n          propertyInfo,\n          setColumnFilter,\n          sortState,\n          setSortState,\n          customColumnOptions,\n          headerFilterRenderer: headerFilterRenderer ?? NoHeaderFilter,\n          filterKey: propertyInfo.name,\n        }}\n      >\n        {column}\n      </ColumnContext.Provider>\n    );\n  });\n\n  columns = addCustomColumns(columns, options, setColumnFilter);\n\n  // When using `hiddenColumns` option, remove columns to hide using their `key`\n  if (options.hiddenColumns) {\n    columns = columns.filter(({ key }) => !(key && options.hiddenColumns?.includes(key)));\n  }\n\n  if (options.rowNumbers) {\n    columns = [\n      <GridColumn key=\"rownumbers\" width=\"4em\" flexGrow={0} renderer={AutoGridRowNumberRenderer}></GridColumn>,\n      ...columns,\n    ];\n  }\n  const { totalCount, filteredCount, itemCounts, footerCountRenderer } = options;\n  if (totalCount ?? filteredCount) {\n    const col = (\n      <FooterContext.Provider\n        key=\"grid-footer\"\n        value={{\n          totalCount,\n          filteredCount,\n          footerCountRenderer,\n          itemCounts,\n        }}\n      >\n        <GridColumnGroup footerRenderer={AutoGridFooterItemCountRenderer}>{columns}</GridColumnGroup>\n      </FooterContext.Provider>\n    );\n    columns = [col];\n  }\n\n  return columns;\n}\n\nfunction AutoGridInner<TItem>(\n  {\n    service,\n    model,\n    itemIdProperty,\n    experimentalFilter,\n    visibleColumns,\n    hiddenColumns,\n    noHeaderFilters,\n    customColumns,\n    columnOptions,\n    rowNumbers,\n    totalCount,\n    filteredCount,\n    footerCountRenderer,\n    ...gridProps\n  }: AutoGridProps<TItem>,\n  ref: ForwardedRef<AutoGridRef<TItem>>,\n): JSX.Element {\n  const [internalFilter, setInternalFilter] = useState<AndFilter>({ '@type': 'and', children: [] });\n  const [itemCounts, setItemCounts] = useState<ItemCounts | undefined>();\n  const gridRef = useRef<GridElement<TItem>>(null);\n  const dataProviderRef = useRef<DataProvider<TItem>>(undefined);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      get grid() {\n        return gridRef.current;\n      },\n      refresh() {\n        dataProviderRef.current?.reset();\n        gridRef.current?.clearCache();\n      },\n    }),\n    [],\n  );\n\n  const setHeaderFilter = (filter: FilterUnion, filterKey: string) => {\n    let changed = false;\n    filter.key = filterKey;\n    const indexOfFilter = filterKey\n      ? internalFilter.children.findIndex((f) => (f as FilterUnion).key === filterKey)\n      : -1;\n    const isEmptyFilter = isFilterEmpty(filter);\n\n    if (indexOfFilter >= 0 && isEmptyFilter) {\n      internalFilter.children.splice(indexOfFilter, 1);\n      changed = true;\n    } else if (!isEmptyFilter) {\n      if (indexOfFilter >= 0) {\n        internalFilter.children[indexOfFilter] = filter;\n        changed = true;\n      } else {\n        internalFilter.children.push(filter);\n        changed = true;\n      }\n    }\n    if (changed) {\n      setInternalFilter({ ...internalFilter });\n    }\n  };\n\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n  const properties = visibleColumns ? modelInfo.getProperties(visibleColumns) : getDefaultProperties(modelInfo);\n  const children = useColumns(properties, setHeaderFilter, {\n    visibleColumns,\n    hiddenColumns,\n    noHeaderFilters,\n    customColumns,\n    columnOptions,\n    rowNumbers,\n    totalCount,\n    filteredCount,\n    footerCountRenderer,\n    itemCounts,\n  });\n\n  useEffect(() => {\n    // Remove all filtering if header filters are removed\n    if (noHeaderFilters) {\n      setInternalFilter({ '@type': 'and', children: [] });\n    }\n  }, [noHeaderFilters]);\n\n  useEffect(() => {\n    // Log an error if totalCount or filteredCount is enabled but the service doesn't implement CountService\n    if ((!isCountService(service) && totalCount) ?? filteredCount) {\n      console.error(\n        '\"totalCount\" and \"filteredCount\" props require the provided service to implement the CountService interface.',\n      );\n    }\n    // Sets the data provider, should be done only once\n    const grid = gridRef.current!;\n    // Wait for the sorting headers to be rendered so that the sorting state is correct for the first data provider call\n    const timeoutId = setTimeout(() => {\n      let firstUpdate = true;\n      const dataProvider = createDataProvider(service, {\n        initialFilter: experimentalFilter ?? internalFilter,\n        loadTotalCount: totalCount,\n        afterLoad(newItemCounts: ItemCounts) {\n          setItemCounts(newItemCounts);\n\n          if (firstUpdate) {\n            // Workaround for https://github.com/vaadin/react-components/issues/129\n            firstUpdate = false;\n            setTimeout(() => grid.recalculateColumnWidths(), 0);\n          }\n        },\n      });\n      dataProviderRef.current = dataProvider;\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      gridRef.current!.dataProvider = dataProvider.load.bind(dataProvider);\n    }, 1);\n\n    return () => clearTimeout(timeoutId);\n  }, [model, service]);\n\n  useEffect(() => {\n    // Update the filtering, whenever the filter changes\n    const dataProvider = dataProviderRef.current;\n    const grid = gridRef.current;\n    if (grid && dataProvider) {\n      dataProvider.setFilter(experimentalFilter ?? internalFilter);\n      grid.clearCache();\n    }\n  }, [experimentalFilter, internalFilter]);\n\n  return (\n    <Grid itemIdPath={modelInfo.idProperty?.name} {...gridProps} ref={gridRef}>\n      {children}\n    </Grid>\n  );\n}\n\ntype AutoGrid = <TItem>(\n  props: AutoGridProps<TItem> & { ref?: ForwardedRef<AutoGridRef<TItem>> },\n) => ReturnType<typeof AutoGridInner>;\n\n/**\n * Auto Grid is a component for displaying tabular data based on a Java backend\n * service. It automatically generates columns based on the properties of a\n * Java class and provides features such as lazy-loading, sorting and filtering.\n *\n * Example usage:\n * ```tsx\n * import { AutoGrid } from '@vaadin/hilla-react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoGrid service={PersonService} model={PersonModel} />\n * ```\n */\nexport const AutoGrid: AutoGrid = forwardRef(AutoGridInner) as AutoGrid;\n\nexport type { ColumnOptions, HeaderFilterRendererProps };\n", "import type { GridSorterDirection } from '@vaadin/react-components/GridSorter.js';\nimport { type Dispatch, type SetStateAction, createContext, type ComponentType } from 'react';\nimport type { ColumnOptions } from './autogrid-columns';\nimport type { HeaderFilterRendererProps } from './header-filter';\nimport type { PropertyInfo } from './model-info';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\n\nexport interface SorterState {\n  direction: GridSorterDirection;\n}\n\nexport type SortState = Record<string, SorterState | undefined>;\n\nexport type ColumnContext = Readonly<{\n  propertyInfo: PropertyInfo;\n  setColumnFilter(filter: FilterUnion, filterKey: string): void;\n  sortState: SortState;\n  setSortState: Dispatch<SetStateAction<SortState>>;\n  customColumnOptions?: ColumnOptions;\n  headerFilterRenderer: ComponentType<HeaderFilterRendererProps>;\n  filterKey: string;\n}>;\n\nexport const ColumnContext = createContext<ColumnContext | null>(null);\n\nexport type CustomColumnContext = Readonly<{\n  setColumnFilter(filter: FilterUnion, filterKey: string): void;\n  headerFilterRenderer: ComponentType<HeaderFilterRendererProps>;\n  filterKey: string;\n}>;\n\nexport const CustomColumnContext = createContext<CustomColumnContext | null>(null);\n", "import type { GridItemModel } from '@vaadin/react-components/Grid.js';\nimport type { GridColumnElement } from '@vaadin/react-components/GridColumn.js';\nimport { Icon } from '@vaadin/react-components/Icon.js';\nimport { type ComponentType, createContext, type CSSProperties, type JSX, useContext } from 'react';\nimport { ColumnContext } from './autogrid-column-context';\nimport type { ItemCounts } from './data-provider';\nimport { useLocaleFormatter } from './locale.js';\nimport { convertToTitleCase } from './util';\n\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\nexport type RendererOptions<TItem> = {\n  item: TItem;\n  model: GridItemModel<TItem>;\n  original: GridColumnElement<TItem>;\n};\n\nfunction getColumnValue<TItem>(context: ColumnContext, item: TItem): any {\n  const path = context.propertyInfo.name;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return path.split('.').reduce<any>((obj, property) => (obj ? obj[property] : undefined), item);\n}\n\nconst fontVariantStyle: CSSProperties = { fontVariantNumeric: 'tabular-nums' };\n\nexport function AutoGridIntegerRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatInteger(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDecimalRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDecimal(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridEnumRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item) || '';\n  return <span>{convertToTitleCase(value)}</span>;\n}\n\nexport function AutoGridBooleanRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  if (value) {\n    return <Icon aria-label=\"false\" icon=\"lumo:checkmark\" />;\n  }\n  return <Icon aria-label=\"true\" style={{ color: 'var(--lumo-secondary-text-color)' }} icon=\"lumo:minus\" />;\n}\n\nexport function AutoGridDateRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatDate(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridDateTimeRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const formatter = useLocaleFormatter();\n  const context = useContext(ColumnContext)!;\n  return <span style={fontVariantStyle}>{formatter.formatLocalDateTime(getColumnValue(context, item))}</span>;\n}\n\nexport function AutoGridJsonRenderer<TItem>({ item }: RendererOptions<TItem>): JSX.Element {\n  const context = useContext(ColumnContext)!;\n  const value = getColumnValue(context, item);\n  const jsonString = value ? JSON.stringify(value) : '';\n  const jsonPreview = jsonString.length > 50 ? `${jsonString.substring(0, 50)}...` : jsonString;\n  return <span>{jsonPreview}</span>;\n}\n\nexport function AutoGridRowNumberRenderer<TItem>({ model }: RendererOptions<TItem>): JSX.Element {\n  return <>{model.index + 1}</>;\n}\n\nexport type FooterContextType = {\n  totalCount?: boolean;\n  filteredCount?: boolean;\n  footerCountRenderer?: ComponentType<ItemCounts>;\n  itemCounts?: ItemCounts;\n};\n\nexport const FooterContext = createContext<FooterContextType>(undefined!);\n\nexport function AutoGridFooterItemCountRenderer(): JSX.Element {\n  const footerContext = useContext(FooterContext);\n  const { totalCount, filteredCount, itemCounts, footerCountRenderer: FooterRenderer } = footerContext;\n\n  if (FooterRenderer) {\n    return <FooterRenderer {...itemCounts} />;\n  }\n\n  let filterCountText: string | undefined;\n  if (filteredCount && itemCounts?.filteredCount !== undefined) {\n    filterCountText =\n      totalCount && itemCounts.totalCount !== undefined\n        ? `Showing: ${itemCounts.filteredCount} out of ${itemCounts.totalCount}`\n        : `Showing: ${itemCounts.filteredCount}`;\n  } else if (totalCount && itemCounts?.totalCount !== undefined) {\n    filterCountText = `Total: ${itemCounts.totalCount}`;\n  }\n  if (filterCountText) {\n    return <p>{filterCountText}</p>;\n  }\n  return <></>;\n}\n", "import { DatePickerElement, type DatePickerDate, type DatePickerI18n } from '@vaadin/react-components/DatePicker.js';\nimport { DateTimePickerElement, type DateTimePickerI18n } from '@vaadin/react-components/DateTimePicker.js';\nimport { createContext, useContext, useMemo } from 'react';\n\nexport const LocaleContext = createContext(navigator.language);\n\nfunction getFormatRegex(format: Intl.DateTimeFormat) {\n  const sampleDate = new Date(1234, 5 - 1, 6);\n  const formattedSample = format.format(sampleDate);\n  const pattern = formattedSample\n    .replace('1234', '(?<year>\\\\d+)')\n    .replace('05', '(?<month>\\\\d+)')\n    .replace('5', '(?<month>\\\\d+)')\n    .replace('06', '(?<day>\\\\d+)')\n    .replace('6', '(?<day>\\\\d+)');\n\n  return new RegExp(pattern, 'u');\n}\n\nfunction tryFormatDate(formatter: Intl.DateTimeFormat, value?: string): string {\n  try {\n    return value ? formatter.format(new Date(value)) : '';\n  } catch {\n    return '';\n  }\n}\n\nexport class LocaleFormatter {\n  readonly #date: Intl.DateTimeFormat;\n  readonly #localTime: Intl.DateTimeFormat;\n  readonly #localDateTime: Intl.DateTimeFormat;\n  readonly #integer: Intl.NumberFormat;\n  readonly #decimal: Intl.NumberFormat;\n  readonly #parsePattern: RegExp;\n\n  constructor(locale?: string) {\n    this.#date = new Intl.DateTimeFormat(locale);\n\n    this.#localTime = new Intl.DateTimeFormat(locale, {\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#localDateTime = new Intl.DateTimeFormat(locale, {\n      day: 'numeric',\n      month: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n\n    this.#integer = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 0,\n    });\n\n    this.#decimal = new Intl.NumberFormat(locale, {\n      maximumFractionDigits: 2,\n      minimumFractionDigits: 2,\n    });\n\n    this.#parsePattern = getFormatRegex(this.#date);\n  }\n\n  formatDate(value?: string): string;\n  formatDate(value: DatePickerDate): string;\n  formatDate(value?: DatePickerDate | string): string {\n    if (typeof value === 'object') {\n      const { year, month, day } = value;\n      const date = new Date();\n      date.setFullYear(year, month, day);\n      return this.#date.format(date);\n    }\n\n    return tryFormatDate(this.#date, value);\n  }\n\n  formatLocalTime(value?: string): string {\n    return tryFormatDate(this.#localTime, `2000-01-01T${value}`);\n  }\n\n  formatLocalDateTime(value?: string): string {\n    return tryFormatDate(this.#localDateTime, value);\n  }\n\n  formatInteger(value?: number): string {\n    return value && Number.isFinite(value) ? this.#integer.format(value) : '';\n  }\n\n  formatDecimal(value?: number): string {\n    return value && Number.isFinite(value) ? this.#decimal.format(value) : '';\n  }\n\n  parse(dateString: string): DatePickerDate | undefined {\n    const match = this.#parsePattern.exec(dateString);\n    const year = Number(match?.groups?.year);\n    const month = Number(match?.groups?.month) - 1;\n    const day = Number(match?.groups?.day);\n\n    // Verify that the parsed date is valid\n    const dateInstance = new Date();\n    dateInstance.setFullYear(year, month, day);\n\n    if (dateInstance.getFullYear() !== year || dateInstance.getMonth() !== month || dateInstance.getDate() !== day) {\n      return undefined;\n    }\n\n    return { year, month, day };\n  }\n}\n\nexport function useLocaleFormatter(): LocaleFormatter {\n  const locale = useContext(LocaleContext);\n  return useMemo(() => new LocaleFormatter(locale), [locale]);\n}\n\nconst defaultDatePickerI18n = new DatePickerElement().i18n;\n\nexport function useDatePickerI18n(): DatePickerI18n {\n  const formatter = useLocaleFormatter();\n\n  return useMemo(\n    () => ({\n      ...defaultDatePickerI18n,\n      formatDate(value) {\n        return formatter.formatDate(value);\n      },\n      parseDate(value) {\n        return formatter.parse(value);\n      },\n    }),\n    [formatter],\n  );\n}\n\nconst defaultDateTimePickerI18n = new DateTimePickerElement().i18n;\n\nexport function useDateTimePickerI18n(): DateTimePickerI18n {\n  const datePickerI18n = useDatePickerI18n();\n\n  return useMemo(\n    () => ({\n      ...defaultDateTimePickerI18n,\n      ...datePickerI18n,\n    }),\n    [datePickerI18n],\n  );\n}\n", "import React, { type CSSProperties, forwardRef } from 'react';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\n\nexport type ComponentStyleProps = Readonly<{\n  id?: string;\n  style?: CSSProperties;\n  className?: string;\n}>;\n\nexport function convertToTitleCase(inputString: string): string {\n  // Convert underscores to spaces\n  const stringWithSpaces = inputString.replace(/_/gu, ' ');\n\n  // Convert to title case\n  const words = stringWithSpaces.split(' ');\n  const titleCaseWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase());\n\n  // Join the title case words with spaces\n  return titleCaseWords.join(' ');\n}\n\nexport function registerStylesheet(stylesheet: CSSStyleSheet): void {\n  const css = Array.from(stylesheet.cssRules)\n    .map((rule) => rule.cssText)\n    .join('\\n');\n\n  const styleTag = document.createElement('style');\n  styleTag.textContent = css;\n  document.head.prepend(styleTag);\n}\n\nconst registeredFeatures = new Set<string>();\nfunction useFeatureRegistration(feature: string): void {\n  if (registeredFeatures.has(feature)) {\n    return;\n  }\n\n  registeredFeatures.add(feature);\n  // @ts-expect-error: esbuild injection\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n  ((feature, vaadinObj = (window.Vaadin ??= {})) => {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `@vaadin/hilla-react-crud/${feature}` : '@vaadin/hilla-react-crud',\n    version: '24.7.2',\n  });\n})(feature);\n}\n\nexport function featureRegistration<C extends (...args: any[]) => any>(Component: C, feature: string): C {\n  return forwardRef<unknown, React.JSX.LibraryManagedAttributes<C, NonNullable<unknown>>>((props, ref) => {\n    useFeatureRegistration(feature);\n    return <Component {...(props as any)} ref={ref} />;\n  }) as unknown as C;\n}\n\nexport function isFilterEmpty(filter: FilterUnion): boolean {\n  if (filter['@type'] === 'and' || filter['@type'] === 'or') {\n    if (filter.children.length === 0) {\n      return true;\n    }\n    return filter.children.every((child) => isFilterEmpty(child as FilterUnion));\n  }\n  if ('filterValue' in filter) {\n    return filter.filterValue === '';\n  }\n  throw new Error(`Unknown filter type: ${'@type' in filter ? filter['@type'] : JSON.stringify(filter)} `);\n}\n", "function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nexport default function assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n  if (!isString) {\n    var invalidType = _typeof(input);\n    if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;\n    throw new TypeError(\"Expected a string but received a \".concat(invalidType));\n  }\n}", "export var alpha = {\n  'en-US': /^[A-Z]+$/i,\n  'az-AZ': /^[A-VXYZÇƏĞİıÖŞÜ]+$/i,\n  'bg-BG': /^[А-Я]+$/i,\n  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[A-ZÆØÅ]+$/i,\n  'de-DE': /^[A-ZÄÖÜß]+$/i,\n  'el-GR': /^[Α-ώ]+$/i,\n  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fa-IR': /^[ابپتثجچحخدذرزژسشصضطظعغفقکگلمنوهی]+$/i,\n  'fi-FI': /^[A-ZÅÄÖ]+$/i,\n  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'ja-JP': /^[ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,\n  'nb-NO': /^[A-ZÆØÅ]+$/i,\n  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[A-ZÆØÅ]+$/i,\n  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,\n  'ru-RU': /^[А-ЯЁ]+$/i,\n  'kk-KZ': /^[А-ЯЁ\\u04D8\\u04B0\\u0406\\u04A2\\u0492\\u04AE\\u049A\\u04E8\\u04BA]+$/i,\n  'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,\n  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[A-ZÅÄÖ]+$/i,\n  'th-TH': /^[ก-๐\\s]+$/i,\n  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,\n  'vi-VN': /^[A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,\n  'ko-KR': /^[ㄱ-ㅎㅏ-ㅣ가-힣]*$/,\n  'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,\n  he: /^[א-ת]+$/,\n  fa: /^['آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی']+$/i,\n  bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,\n  eo: /^[ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,\n  'hi-IN': /^[\\u0900-\\u0961]+[\\u0972-\\u097F]*$/i,\n  'si-LK': /^[\\u0D80-\\u0DFF]+$/\n};\nexport var alphanumeric = {\n  'en-US': /^[0-9A-Z]+$/i,\n  'az-AZ': /^[0-9A-VXYZÇƏĞİıÖŞÜ]+$/i,\n  'bg-BG': /^[0-9А-Я]+$/i,\n  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[0-9A-ZÆØÅ]+$/i,\n  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,\n  'el-GR': /^[0-9Α-ω]+$/i,\n  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fi-FI': /^[0-9A-ZÅÄÖ]+$/i,\n  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'ja-JP': /^[0-9０-９ぁ-んァ-ヶｦ-ﾟ一-龠ー・。、]+$/i,\n  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,\n  'ru-RU': /^[0-9А-ЯЁ]+$/i,\n  'kk-KZ': /^[0-9А-ЯЁ\\u04D8\\u04B0\\u0406\\u04A2\\u0492\\u04AE\\u049A\\u04E8\\u04BA]+$/i,\n  'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,\n  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,\n  'th-TH': /^[ก-๙\\s]+$/i,\n  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,\n  'ko-KR': /^[0-9ㄱ-ㅎㅏ-ㅣ가-힣]*$/,\n  'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,\n  'vi-VN': /^[0-9A-ZÀÁẠẢÃÂẦẤẬẨẪĂẰẮẶẲẴĐÈÉẸẺẼÊỀẾỆỂỄÌÍỊỈĨÒÓỌỎÕÔỒỐỘỔỖƠỜỚỢỞỠÙÚỤỦŨƯỪỨỰỬỮỲÝỴỶỸ]+$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,\n  he: /^[0-9א-ת]+$/,\n  fa: /^['0-9آاءأؤئبپتثجچحخدذرزژسشصضطظعغفقکگلمنوهةی۱۲۳۴۵۶۷۸۹۰']+$/i,\n  bn: /^['ঀঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣ০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻']+$/,\n  eo: /^[0-9ABCĈD-GĜHĤIJĴK-PRSŜTUŬVZ]+$/i,\n  'hi-IN': /^[\\u0900-\\u0963]+[\\u0966-\\u097F]*$/i,\n  'si-LK': /^[0-9\\u0D80-\\u0DFF]+$/\n};\nexport var decimal = {\n  'en-US': '.',\n  ar: '٫'\n};\nexport var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];\nfor (var locale, i = 0; i < englishLocales.length; i++) {\n  locale = \"en-\".concat(englishLocales[i]);\n  alpha[locale] = alpha['en-US'];\n  alphanumeric[locale] = alphanumeric['en-US'];\n  decimal[locale] = decimal['en-US'];\n}\n\n// Source: http://www.localeplanet.com/java/\nexport var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];\nfor (var _locale, _i = 0; _i < arabicLocales.length; _i++) {\n  _locale = \"ar-\".concat(arabicLocales[_i]);\n  alpha[_locale] = alpha.ar;\n  alphanumeric[_locale] = alphanumeric.ar;\n  decimal[_locale] = decimal.ar;\n}\nexport var farsiLocales = ['IR', 'AF'];\nfor (var _locale2, _i2 = 0; _i2 < farsiLocales.length; _i2++) {\n  _locale2 = \"fa-\".concat(farsiLocales[_i2]);\n  alphanumeric[_locale2] = alphanumeric.fa;\n  decimal[_locale2] = decimal.ar;\n}\nexport var bengaliLocales = ['BD', 'IN'];\nfor (var _locale3, _i3 = 0; _i3 < bengaliLocales.length; _i3++) {\n  _locale3 = \"bn-\".concat(bengaliLocales[_i3]);\n  alpha[_locale3] = alpha.bn;\n  alphanumeric[_locale3] = alphanumeric.bn;\n  decimal[_locale3] = decimal['en-US'];\n}\n\n// Source: https://en.wikipedia.org/wiki/Decimal_mark\nexport var dotDecimal = ['ar-EG', 'ar-LB', 'ar-LY'];\nexport var commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'en-ZM', 'eo', 'es-ES', 'fr-CA', 'fr-FR', 'id-ID', 'it-IT', 'ku-IQ', 'hi-IN', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'kk-KZ', 'si-LK', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA', 'vi-VN'];\nfor (var _i4 = 0; _i4 < dotDecimal.length; _i4++) {\n  decimal[dotDecimal[_i4]] = decimal['en-US'];\n}\nfor (var _i5 = 0; _i5 < commaDecimal.length; _i5++) {\n  decimal[commaDecimal[_i5]] = ',';\n}\nalpha['fr-CA'] = alpha['fr-FR'];\nalphanumeric['fr-CA'] = alphanumeric['fr-FR'];\nalpha['pt-BR'] = alpha['pt-PT'];\nalphanumeric['pt-BR'] = alphanumeric['pt-PT'];\ndecimal['pt-BR'] = decimal['pt-PT'];\n\n// see #862\nalpha['pl-Pl'] = alpha['pl-PL'];\nalphanumeric['pl-Pl'] = alphanumeric['pl-PL'];\ndecimal['pl-Pl'] = decimal['pl-PL'];\n\n// see #1455\nalpha['fa-AF'] = alpha.fa;", "import assertString from './util/assertString';\nimport { decimal } from './alpha';\nvar numericNoSymbols = /^[0-9]+$/;\nexport default function isNumeric(str, options) {\n  assertString(str);\n  if (options && options.no_symbols) {\n    return numericNoSymbols.test(str);\n  }\n  return new RegExp(\"^[+-]?([0-9]*[\".concat((options || {}).locale ? decimal[options.locale] : '.', \"])?[0-9]+$\")).test(str);\n}", "import assertString from './util/assertString';\nvar defaultOptions = {\n  loose: false\n};\nvar strictBooleans = ['true', 'false', '1', '0'];\nvar looseBooleans = [].concat(strictBooleans, ['yes', 'no']);\nexport default function isBoolean(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  assertString(str);\n  if (options.loose) {\n    return looseBooleans.includes(str.toLowerCase());\n  }\n  return strictBooleans.includes(str);\n}", "import assertString from './util/assertString';\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z-.:]{1,})?$');\nexport default function isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  assertString(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  }\n  if (version === '4') {\n    return IPv4AddressRegExp.test(str);\n  }\n  if (version === '6') {\n    return IPv6AddressRegExp.test(str);\n  }\n  return false;\n}", "import assertString from './util/assertString';\nimport { decimal } from './alpha';\nexport default function isFloat(str, options) {\n  assertString(str);\n  options = options || {};\n  var _float = new RegExp(\"^(?:[-+])?(?:[0-9]+)?(?:\\\\\".concat(options.locale ? decimal[options.locale] : '.', \"[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$\"));\n  if (str === '' || str === '.' || str === ',' || str === '-' || str === '+') {\n    return false;\n  }\n  var value = parseFloat(str.replace(',', '.'));\n  return _float.test(str) && (!options.hasOwnProperty('min') || value >= options.min) && (!options.hasOwnProperty('max') || value <= options.max) && (!options.hasOwnProperty('lt') || value < options.lt) && (!options.hasOwnProperty('gt') || value > options.gt);\n}\nexport var locales = Object.keys(decimal);", "import isAfter from 'validator/es/lib/isAfter.js';\nimport isBefore from 'validator/es/lib/isBefore.js';\nimport isBoolean from 'validator/es/lib/isBoolean.js';\nimport isDecimal from 'validator/es/lib/isDecimal.js';\nimport isEmail from 'validator/es/lib/isEmail.js';\nimport isFloat from 'validator/es/lib/isFloat.js';\nimport isLength from 'validator/es/lib/isLength.js';\nimport matches from 'validator/es/lib/matches.js';\nimport toFloat from 'validator/es/lib/toFloat.js';\nimport type { Validator } from './Validation.js';\n\ninterface ValidatorAttributes {\n  message?: string;\n}\ninterface ValueNumberAttributes extends ValidatorAttributes {\n  value: number | string;\n}\ninterface DigitAttributes extends ValidatorAttributes {\n  integer: number;\n  fraction: number;\n}\ninterface SizeAttributes extends ValidatorAttributes {\n  min?: number;\n  max?: number;\n}\ninterface PatternAttributes extends ValidatorAttributes {\n  regexp: RegExp | string;\n}\ninterface DecimalAttributes extends ValueNumberAttributes {\n  inclusive?: boolean;\n}\n\nabstract class AbstractValidator<T> implements Validator<T> {\n  message = 'invalid';\n\n  impliesRequired = false;\n\n  constructor(attrs?: ValidatorAttributes) {\n    if (attrs?.message) {\n      this.message = attrs.message;\n    }\n  }\n\n  abstract validate(value: T): Promise<boolean> | boolean;\n  abstract get name(): string;\n}\n\nexport class Required<T> extends AbstractValidator<T> {\n  override impliesRequired = true;\n\n  override validate(value: T): boolean {\n    if (typeof value === 'string' || Array.isArray(value)) {\n      return value.length > 0;\n    }\n    if (typeof value === 'number') {\n      return Number.isFinite(value);\n    }\n    return value !== undefined;\n  }\n\n  readonly name: string = 'Required';\n}\n\nfunction _asValidatorAttributes(attrs: PatternAttributes | RegExp | ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : {};\n}\n\nfunction _value(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs.value : attrs;\n}\n\nabstract class NumberValidator<T> extends AbstractValidator<T> {\n  override validate(value: T) {\n    const num = Number(value);\n    return !isNaN(num) && isFinite(num);\n  }\n}\n\nexport class IsNumber extends NumberValidator<number | null | undefined> {\n  optional: boolean;\n\n  constructor(optional: boolean, attrs?: ValidatorAttributes) {\n    super({ message: 'must be a number', ...attrs });\n    this.optional = optional;\n  }\n\n  override validate(value: number | null | undefined): boolean {\n    return (this.optional && value == null) || super.validate(value);\n  }\n\n  readonly name = 'IsNumber';\n}\n\nabstract class ValueNumberValidator<T> extends NumberValidator<T> {\n  value: number;\n\n  protected constructor(attrs: ValueNumberAttributes | number | string) {\n    super(_asValidatorAttributes(attrs));\n    const val = _value(attrs);\n    this.value = typeof val === 'string' ? parseFloat(val) : val;\n  }\n}\n\n// JSR380 equivalent (https://beanvalidation.org/2.0/spec/#builtinconstraints)\nexport class Email extends AbstractValidator<string> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a well-formed email address', ...attrs });\n  }\n\n  override validate(value: string | null | undefined): boolean {\n    return !value || isEmail(value);\n  }\n\n  readonly name = 'Email';\n}\n\nexport class Null extends AbstractValidator<any> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be null', ...attrs });\n  }\n\n  override validate(value: any): boolean {\n    return value == null;\n  }\n\n  readonly name = 'Null';\n}\n\nexport class NotNull<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be null', ...attrs });\n  }\n\n  override validate(value: T): value is NonNullable<T> {\n    return !new Null().validate(value);\n  }\n\n  override readonly name = 'NotNull';\n}\n\nexport class NotEmpty<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be empty', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (\n      super.validate(value) && new NotNull<T>().validate(value) && ((value as { length?: number }).length ?? 0) > 0\n    );\n  }\n\n  override readonly name = 'NotEmpty';\n}\n\nexport class NotBlank<T> extends Required<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must not be blank', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && new NotNull<T>().validate(value) && String(value).trim().length > 0;\n  }\n\n  override readonly name = 'NotBlank';\n}\n\nexport class AssertTrue<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be true', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBoolean(String(value)) && String(value) === 'true';\n  }\n\n  readonly name = 'AssertTrue';\n}\n\nexport class AssertFalse<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be false', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return !new AssertTrue<T>().validate(value);\n  }\n\n  readonly name = 'AssertFalse';\n}\n\nfunction _asValueNumberAttributes(attrs: ValueNumberAttributes | number | string) {\n  return typeof attrs === 'object' ? attrs : { value: attrs };\n}\n\nexport class Min<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be greater than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { min: this.value });\n  }\n\n  readonly name = 'Min';\n}\n\nexport class Max<T> extends ValueNumberValidator<T> {\n  constructor(attrs: ValueNumberAttributes | number | string) {\n    super({\n      message: `must be less than or equal to ${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { max: this.value });\n  }\n\n  readonly name = 'Max';\n}\n\nfunction _inclusive(attrs: DecimalAttributes | number | string) {\n  return typeof attrs !== 'object' || attrs.inclusive !== false;\n}\n\nexport class DecimalMin<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be greater than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'min' : 'gt']: this.value });\n  }\n\n  readonly name = 'DecimalMin';\n}\n\nexport class DecimalMax<T> extends ValueNumberValidator<T> {\n  inclusive: boolean;\n\n  constructor(attrs: DecimalAttributes | number | string) {\n    super({\n      message: `must be less than ${_inclusive(attrs) ? 'or equal to ' : ''}${_value(attrs)}`,\n      ..._asValueNumberAttributes(attrs),\n    });\n    this.inclusive = _inclusive(attrs);\n  }\n\n  override validate(value: T): boolean {\n    return super.validate(value) && isFloat(String(value), { [this.inclusive ? 'max' : 'lt']: this.value });\n  }\n\n  readonly name = 'DecimalMax';\n}\n\nexport class Negative<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    const fv = toFloat(String(value));\n    return isNaN(fv) || fv < 0;\n  }\n\n  readonly name = 'Negative';\n}\n\nexport class NegativeOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be less than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (toFloat(String(value)) || 0) <= 0;\n  }\n\n  readonly name = 'NegativeOrZero';\n}\n\nexport class Positive<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    const fv = toFloat(String(value));\n    return isNaN(fv) || fv > 0;\n  }\n\n  readonly name = 'Positive';\n}\n\nexport class PositiveOrZero<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be greater than or equal to 0', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return (toFloat(String(value)) || 0) >= 0;\n  }\n\n  readonly name = 'PositiveOrZero';\n}\n\nfunction _min(attrs: SizeAttributes) {\n  return attrs.min ?? 0;\n}\n\nfunction _max(attrs: SizeAttributes) {\n  return attrs.max ?? Number.MAX_SAFE_INTEGER;\n}\n\nexport class Size extends AbstractValidator<string> {\n  min: number;\n  max: number;\n\n  constructor(attrs: SizeAttributes = {}) {\n    super({ message: `size must be between ${_min(attrs)} and ${_max(attrs)}`, ...attrs });\n    this.min = _min(attrs);\n    this.max = _max(attrs);\n    if (this.min > 0) {\n      this.impliesRequired = true;\n    }\n  }\n\n  override validate(value: string): boolean {\n    if (this.min && this.min > 0 && !new Required().validate(value)) {\n      return false;\n    }\n    // eslint-disable-next-line sort-keys\n    return isLength(value, { min: this.min, max: this.max });\n  }\n\n  readonly name = 'Size';\n}\n\nexport class Digits<T> extends AbstractValidator<T> {\n  integer: number;\n  fraction: number;\n\n  constructor(attrs: DigitAttributes) {\n    super({\n      message: `numeric value out of bounds (<${attrs.integer} digits>.<${attrs.fraction} digits> expected)`,\n      ...attrs,\n    });\n    this.integer = attrs.integer;\n    this.fraction = attrs.fraction;\n  }\n\n  override validate(value: T): boolean {\n    return (\n      String(Math.floor(Math.abs(toFloat(String(value))))).length <= this.integer &&\n      // eslint-disable-next-line camelcase\n      isDecimal(String(value), { decimal_digits: `0,${this.fraction}` })\n    );\n  }\n\n  readonly name = 'Digits';\n}\n\nexport class Past<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a past date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isBefore(String(value));\n  }\n\n  readonly name = 'Past';\n}\n\n/*\n  @PastOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class PastOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the past or in the present', ...attrs });\n//   }\n//   validate() {\n//     return true;\n//   }\n// }\n\nexport class Future<T> extends AbstractValidator<T> {\n  constructor(attrs?: ValidatorAttributes) {\n    super({ message: 'must be a future date', ...attrs });\n  }\n\n  override validate(value: T): boolean {\n    return isAfter(String(value));\n  }\n\n  readonly name = 'Future';\n}\n\n/*\n  @FutureOrPresent has no client-side implementation yet.\n  It would consider any input valid and let the server-side to do validation.\n  (It's not trivial to ensure the same granularity of _present_ as on the server-side:\n  year / month / day / minute).\n*/\n// export class FutureOrPresent extends AbstractValidator<any> {\n//   constructor(attrs?: ValidatorAttributes) {\n//     super({ message: 'must be a date in the present or in the future', ...attrs });\n//   }\n//   validate = () => true;\n// }\n\nfunction _regexp(attrs: PatternAttributes | RegExp | string) {\n  if (typeof attrs === 'string') {\n    return new RegExp(attrs, 'u');\n  }\n\n  if (attrs instanceof RegExp) {\n    return attrs;\n  }\n\n  if (typeof attrs.regexp === 'string') {\n    return new RegExp(attrs.regexp, 'u');\n  }\n\n  return attrs.regexp;\n}\n\nexport class Pattern extends AbstractValidator<string> {\n  regexp: RegExp;\n\n  constructor(attrs: PatternAttributes | RegExp | string) {\n    super({\n      message: `must match the following regular expression: ${_regexp(attrs).toString()}`,\n      ..._asValidatorAttributes(attrs),\n    });\n    this.regexp = _regexp(attrs);\n  }\n\n  override validate(value: any): boolean {\n    return matches(value, this.regexp);\n  }\n\n  readonly name = 'Pattern';\n}\n\n/**\n * Validator that reports an error when the bound HTML element validation\n * returns false from `element.checkValidity()` and `element.validity.valid`.\n */\nexport class ValidityStateValidator<T> extends AbstractValidator<T> {\n  override message = '';\n\n  // eslint-disable-next-line no-useless-constructor,@typescript-eslint/no-useless-constructor\n  constructor() {\n    super();\n  }\n\n  override validate(): boolean {\n    return false;\n  }\n\n  readonly name = 'ValidityStateValidator';\n}\n", "import isNumeric from 'validator/es/lib/isNumeric.js';\nimport { type BinderNode, getBinderNode } from './BinderNode.js';\nimport type { Validator } from './Validation.js';\nimport { IsNumber } from './Validators.js';\n\nexport const _createEmptyItemValue = Symbol('createEmptyItemValue');\nexport const _parent = Symbol('parent');\nexport const _key = Symbol('key');\nexport const _fromString = Symbol('fromString');\nexport const _validators = Symbol('validators');\nexport const _meta = Symbol('meta');\nexport const _getPropertyModel = Symbol('getPropertyModel');\nexport const _enum = Symbol('enum');\nexport const _items = Symbol('items');\n\nconst _optional = Symbol('optional');\n\nexport interface HasFromString<T> {\n  [_fromString](value: string): T;\n}\n\nexport function hasFromString<T>(model: AbstractModel<T>): model is AbstractModel<T> & HasFromString<T> {\n  return _fromString in model;\n}\n\nexport type Value<M> = M extends AbstractModel<infer T> ? T : never;\n\nexport const modelDetachedParent = { $value$: undefined };\n\nexport type ModelParent = AbstractModel | BinderNode | typeof modelDetachedParent;\n\nexport interface Annotation {\n  name: string;\n  attributes?: Record<string, unknown>;\n}\n\nexport interface ModelMetadata {\n  javaType?: string;\n  annotations?: Annotation[];\n}\n\nexport interface ModelOptions<T> {\n  validators?: ReadonlyArray<Validator<T>>;\n  meta?: ModelMetadata;\n}\n\nexport type DetachedModelConstructor<M> = {\n  prototype: object;\n  new (parent: typeof modelDetachedParent, key: '$value$', optional: boolean): M;\n};\n\nexport function createDetachedModel<M extends AbstractModel>(type: DetachedModelConstructor<M>): M {\n  return new type(modelDetachedParent, '$value$', false);\n}\n\nexport abstract class AbstractModel<T = unknown> {\n  static createEmptyValue(): unknown {\n    return undefined;\n  }\n\n  declare readonly ['constructor']: typeof AbstractModel<T>;\n\n  readonly [_parent]?: ModelParent;\n\n  readonly [_validators]: ReadonlyArray<Validator<T>>;\n\n  readonly [_meta]: ModelMetadata;\n\n  readonly [_optional]: boolean;\n\n  [_key]: keyof any;\n\n  constructor(parent: ModelParent, key: keyof any, optional: boolean, options?: ModelOptions<T>) {\n    this[_parent] = parent;\n    this[_key] = key;\n    this[_optional] = optional;\n    this[_validators] = options?.validators ?? [];\n    this[_meta] = options?.meta ?? {};\n  }\n\n  /**\n   * @deprecated Use {@link BinderNode.value} with string conversion instead\n   *\n   * @example\n   * ```ts\n   * const result = String(binder.for(model).value);\n   * ```\n   */\n  toString(): string {\n    return String(this.valueOf());\n  }\n\n  /**\n   * @deprecated Use {@link BinderNode.value} instead\n   *\n   * @example\n   * ```ts\n   * const result = binder.for(model).value;\n   * ```\n   */\n  valueOf(): T {\n    const { value } = getBinderNode(this);\n\n    if (value === undefined) {\n      throw new TypeError('Value is undefined');\n    }\n\n    return value! as T;\n  }\n}\n\nexport abstract class PrimitiveModel<T> extends AbstractModel<T> {}\n\nexport class BooleanModel extends PrimitiveModel<boolean> implements HasFromString<boolean> {\n  static override createEmptyValue = Boolean;\n\n  [_fromString](str: string): boolean {\n    // This implementation matches the values accepted by validator.js and converts all other values to false\n    // See https://github.com/validatorjs/validator.js/blob/master/src/lib/isBoolean.js\n    return ['true', '1', 'yes'].includes(str.toLowerCase());\n  }\n}\n\nexport class NumberModel extends PrimitiveModel<number> implements HasFromString<number | undefined> {\n  static override createEmptyValue(): number {\n    return NaN;\n  }\n\n  constructor(parent: ModelParent, key: keyof any, optional: boolean, options?: ModelOptions<number>) {\n    // Prepend a built-in validator to indicate NaN input\n    const validators = [new IsNumber(optional), ...(options?.validators ?? [])];\n    super(parent, key, optional, { ...options, validators });\n  }\n\n  [_fromString](str: string): number | undefined {\n    // Returning undefined is needed to support passing the validation when the value of an optional number field is\n    // an empty string\n    if (str === '') {\n      return undefined;\n    }\n    return isNumeric(str) ? Number.parseFloat(str) : NaN;\n  }\n}\n\nexport class StringModel extends PrimitiveModel<string> implements HasFromString<string> {\n  static override createEmptyValue = String;\n  [_fromString] = String;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare enum Enum {}\n\nexport function makeEnumEmptyValueCreator<M extends EnumModel>(type: DetachedModelConstructor<M>): () => Value<M> {\n  const { [_enum]: enumObject } = createDetachedModel(type);\n  const defaultValue = Object.values(enumObject)[0] as Value<M>;\n\n  return () => defaultValue;\n}\n\nexport abstract class EnumModel<E extends typeof Enum = typeof Enum>\n  extends AbstractModel<E[keyof E]>\n  implements HasFromString<E[keyof E] | undefined>\n{\n  abstract readonly [_enum]: E;\n\n  [_fromString](value: string): E[keyof E] | undefined {\n    return value in this[_enum] ? (value as E[keyof E]) : undefined;\n  }\n}\n\nexport function* getObjectModelOwnAndParentGetters<M extends ObjectModel>(\n  model: M,\n): Generator<readonly [key: keyof Value<M>, getter: () => AbstractModel]> {\n  for (\n    let proto = Object.getPrototypeOf(model);\n    proto !== ObjectModel.prototype;\n    proto = Object.getPrototypeOf(proto)\n  ) {\n    const descriptors = Object.getOwnPropertyDescriptors(proto);\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    for (const [name, { get }] of Object.entries(descriptors)) {\n      if (get) {\n        yield [name as keyof Value<M>, get];\n      }\n    }\n  }\n}\n\nexport function makeObjectEmptyValueCreator<M extends ObjectModel>(type: DetachedModelConstructor<M>): () => Value<M> {\n  const model = createDetachedModel(type);\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const obj: Partial<Value<M>> = {};\n\n    // Iterate the model class hierarchy up to the ObjectModel, and extract\n    // the property getter names from every prototypes\n    for (const [key, getter] of getObjectModelOwnAndParentGetters(model)) {\n      const propertyModel = getter.call(model);\n      obj[key] = (\n        propertyModel[_optional] ? undefined : propertyModel.constructor.createEmptyValue()\n      ) as Value<M>[keyof Value<M>];\n    }\n\n    return obj as Value<M>;\n  };\n}\n\ntype ChildModel<T extends Record<never, never>, K extends keyof T> = AbstractModel<NonNullable<T[K]>>;\n\nexport class ObjectModel<T extends Record<never, never> = Record<never, never>> extends AbstractModel<T> {\n  static override createEmptyValue = makeObjectEmptyValueCreator(ObjectModel);\n\n  #properties: { [K in keyof T]?: ChildModel<T, K> } = {};\n\n  protected [_getPropertyModel]<K extends keyof T, M extends ChildModel<T, K>>(\n    key: K,\n    init: (parent: this, key: K) => M,\n  ): M {\n    if (!this.#properties[key]) {\n      this.#properties[key] = init(this, key);\n    }\n\n    return this.#properties[key] as M;\n  }\n}\n\nexport type ArrayItemModel<M> = M extends ArrayModel<infer MItem> ? MItem : never;\n\nexport class ArrayModel<MItem extends AbstractModel = AbstractModel> extends AbstractModel<Array<Value<MItem>>> {\n  static override createEmptyValue(): [] {\n    return [];\n  }\n\n  [_createEmptyItemValue]: () => Value<MItem>;\n\n  // The `parent` parameter is AbstractModel here for purpose; for some reason, setting it to `ArrayModel<MItem>` or\n  // `this` breaks the type inference in TS (v5.3.2).\n  readonly #createItem: (parent: AbstractModel, index: number) => MItem;\n  #items: Array<MItem | undefined> = [];\n\n  // eslint-disable-next-line @typescript-eslint/max-params\n  constructor(\n    parent: ModelParent,\n    key: keyof any,\n    optional: boolean,\n    createItem: (parent: AbstractModel, key: number) => MItem,\n    options?: ModelOptions<Array<Value<MItem>>>,\n  ) {\n    super(parent, key, optional, options);\n    this.#createItem = createItem;\n    this[_createEmptyItemValue] = createItem(this, 0).constructor.createEmptyValue as () => Value<MItem>;\n  }\n\n  *[_items](): Generator<MItem, void, void> {\n    const values = getBinderNode(this).value ?? [];\n\n    if (values.length !== this.#items.length) {\n      this.#items.length = values.length;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      let item: MItem | undefined = this.#items[i];\n\n      if (!item) {\n        item = this.#createItem(this, i);\n        this.#items[i] = item;\n      }\n\n      yield item;\n    }\n  }\n\n  /**\n   * Iterates over the current model and yields a binder node for every item\n   * model.\n   *\n   * @deprecated Use the {@link m.items} function instead. For example, in React:\n   * ```tsx\n   * const {model, field} = useForm(GroupModel);\n   * return Array.from(m.items(model.people), (personModel) =>\n   *   <TextField label=\"Full name\" {...field(personModel.fullName)} />\n   * );\n   * ```\n   * In Lit:\n   * ```ts\n   * return html`${repeat(\n   *   m.items(this.binder.model.people),\n   *   (personModel) => html`<vaadin-text-field label=\"Full name\" ${field(personModel.fullName)}></vaadin-text-field>`,\n   * )}`;\n   * ```\n   */\n  *[Symbol.iterator](): IterableIterator<BinderNode<MItem>> {\n    for (const item of this[_items]()) {\n      yield getBinderNode(item);\n    }\n  }\n}\n\nexport const m = {\n  /**\n   * Returns an iterator over item models in the array model.\n   *\n   * @param model - The array model to iterate over.\n   * @returns An iterator over item models.\n   */\n  items<M extends ArrayModel>(model: M): Generator<ArrayItemModel<M>, void, void> {\n    return model[_items]() as Generator<ArrayItemModel<M>, void, void>;\n  },\n};\n", "/**\n * Symbol for storing `ValidityState` in the binder nodes.\n */\nexport const _validity = Symbol('validity');\n\n/**\n * Default validity state with `valid` flag set, assuming a valid state.\n */\nexport const defaultValidity: ValidityState = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true,\n};\n", "/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */\n/*\n * Copyright 2000-2020 Vaadin Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n// TODO: Fix dependency cycle\n\nimport type { BinderRoot } from './BinderRoot.js';\nimport {\n  _createEmptyItemValue,\n  _key,\n  _parent,\n  _validators,\n  AbstractModel,\n  type ArrayItemModel,\n  ArrayModel,\n  getObjectModelOwnAndParentGetters,\n  ObjectModel,\n  type Value,\n} from './Models.js';\nimport type { ClassStaticProperties } from './types.js';\nimport type { Validator, ValueError } from './Validation.js';\nimport { ValidityStateValidator } from './Validators.js';\nimport { _validity } from './Validity.js';\n\nexport const _updateValidation = Symbol('updateValidation');\nexport const _update = Symbol('update');\nexport const _setErrorsWithDescendants = Symbol('setErrorsWithDescendants');\nexport const _clearValidation = Symbol('clearValidation');\n\nconst nodes = new WeakMap<AbstractModel, BinderNode>();\n\nexport function getBinderNode<M extends AbstractModel>(model: M): BinderNode<M> {\n  let node = nodes.get(model);\n\n  if (!node) {\n    node = new BinderNode(model);\n    nodes.set(model, node);\n  }\n\n  return node as BinderNode<M>;\n}\n\nfunction getErrorPropertyName(valueError: ValueError): string {\n  return typeof valueError.property === 'string' ? valueError.property : getBinderNode(valueError.property).name;\n}\n\nfunction updateObjectOrArrayKey<M extends AbstractModel>(\n  model: M,\n  value: Value<M>,\n  key: keyof any,\n  keyValue: unknown,\n): Value<M> {\n  if (model instanceof ObjectModel) {\n    // Value contained in object - replace object in parent\n    return {\n      ...(value as Record<never, never> & Value<M>),\n      [key]: keyValue,\n    };\n  }\n\n  if (keyValue === undefined) {\n    throw new TypeError('Unexpected undefined value');\n  }\n\n  if (model instanceof ArrayModel) {\n    // Value contained in array - replace array in parent\n    const array = (value as unknown[]).slice();\n    array[key as number] = keyValue;\n    return array as Value<M>;\n  }\n\n  throw new TypeError(`Unknown model type ${(model as AbstractModel).constructor.name}`);\n}\n\nexport const CHANGED = new Event('binder-node-changed');\n\nclass NotArrayModelError extends Error {\n  constructor() {\n    super('The model does not represent array');\n  }\n}\n\nclass NotArrayItemModelError extends Error {\n  constructor() {\n    super('The model does not represent array item');\n  }\n}\n\ndeclare class ArrayItemBinderNode<M extends AbstractModel> extends BinderNode<M> {\n  // @ts-expect-error: re-defining the parent getter.\n  declare readonly parent: BinderNode<ArrayModel<M>>;\n}\n\nconst defaultArrayItemCache = new WeakMap<BinderNode, unknown>();\n\n/**\n * The BinderNode\\<M\\> class provides the form binding related APIs\n * with respect to a particular model instance.\n *\n * Structurally, model instances form a tree, in which the object\n * and array models have child nodes of field and array item model\n * instances.\n */\nexport class BinderNode<M extends AbstractModel = AbstractModel> extends EventTarget {\n  declare readonly ['constructor']: ClassStaticProperties<typeof BinderNode<M>>;\n  readonly model: M;\n  /**\n   * The validity state read from the bound element, if any. Represents the\n   * HTML element internal validation.\n   *\n   * For elements with `validity.valid === false`, the value in the\n   * bound element is considered as invalid.\n   */\n  [_validity]?: ValidityState;\n  #ownErrors?: ReadonlyArray<ValueError<Value<M>>>;\n  #validators: ReadonlyArray<Validator<Value<M>>>;\n  readonly #validityStateValidator: ValidityStateValidator<Value<M>>;\n  #visited = false;\n\n  constructor(model: M) {\n    super();\n    this.model = model;\n    nodes.set(model, this);\n    this.#validityStateValidator = new ValidityStateValidator<Value<M>>();\n    this.#validators = model[_validators];\n\n    // Workaround for children initialization with private props\n    if (this.constructor === BinderNode) {\n      this.initializeValue();\n    }\n  }\n\n  /**\n   * The binder for the top-level model.\n   */\n  get binder(): BinderRoot {\n    const binder = this.parent?.binder;\n\n    if (!binder) {\n      throw new TypeError('BinderNode is detached');\n    }\n\n    return binder;\n  }\n\n  /**\n   * The default value related to the model\n   */\n  get defaultValue(): Value<M> | undefined {\n    const key = this.model[_key];\n    const parentDefaultValue = this.parent!.defaultValue as Readonly<Partial<Record<typeof key, Value<M>>>>;\n\n    if (this.#isArrayItem() && !(key in parentDefaultValue)) {\n      if (defaultArrayItemCache.has(this.parent)) {\n        return defaultArrayItemCache.get(this.parent) as Value<M>;\n      }\n\n      const value = this.model.constructor.createEmptyValue();\n      defaultArrayItemCache.set(this.parent, value);\n      return value as Value<M>;\n    }\n\n    return parentDefaultValue[key];\n  }\n\n  /**\n   * True if the current value is different from the defaultValue.\n   */\n  get dirty(): boolean {\n    return this.value !== this.defaultValue;\n  }\n\n  /**\n   * The combined array of all errors for this node’s model and all its nested\n   * models\n   */\n  get errors(): readonly ValueError[] {\n    return [...Array.from(this.#getChildBinderNodes(), (node) => node.errors).flat(), ...this.ownErrors];\n  }\n\n  /**\n   * Indicates if there is any error for the node's model.\n   */\n  get invalid(): boolean {\n    return this.errors.length > 0;\n  }\n\n  /**\n   * The name generated from the model structure, used to set the name\n   * attribute on the field components.\n   */\n  get name(): string {\n    let { model }: { model: AbstractModel } = this;\n    let name = '';\n\n    while (model[_parent] instanceof AbstractModel) {\n      name = `${String(model[_key])}${name ? `.${name}` : ''}`;\n      model = model[_parent];\n    }\n\n    return name;\n  }\n\n  /**\n   * The array of validation errors directly related with the model.\n   */\n  get ownErrors(): ReadonlyArray<ValueError<Value<M>>> {\n    return this.#ownErrors ? this.#ownErrors : [];\n  }\n\n  /**\n   * The parent node, if this binder node corresponds to a nested model,\n   * otherwise undefined for the top-level binder.\n   */\n  get parent(): BinderNode | undefined {\n    const modelParent = this.model[_parent];\n    return modelParent instanceof AbstractModel ? getBinderNode(modelParent) : undefined;\n  }\n\n  /**\n   * True if the value is required to be non-empty.\n   */\n  get required(): boolean {\n    return this.#validators.some((validator) => validator.impliesRequired);\n  }\n\n  /**\n   * The array of validators for the model. The default value is defined in the\n   * model.\n   */\n  get validators(): ReadonlyArray<Validator<Value<M>>> {\n    return this.#validators;\n  }\n\n  set validators(validators: ReadonlyArray<Validator<Value<M>>>) {\n    this.#validators = validators;\n    this.dispatchEvent(CHANGED);\n  }\n\n  /**\n   * The current value related to the model\n   */\n  get value(): Value<M> | undefined {\n    if (!this.parent) {\n      return undefined;\n    }\n\n    this.initializeValue();\n\n    const key = this.model[_key];\n\n    // The value of parent in unknown, so we need to cast it.\n    type ParentValue = Readonly<Record<typeof key, Value<M>>>;\n    return (this.parent.value as ParentValue)[key];\n  }\n\n  set value(value: Value<M> | undefined) {\n    this.initializeValue(true);\n    const oldValue = this.value;\n    if (value !== oldValue) {\n      this.#setValueState(value, undefined);\n      this[_updateValidation]().catch(() => {});\n    }\n  }\n\n  /**\n   * True if the bound field was ever focused and blurred by the user.\n   */\n  get visited(): boolean {\n    return this.#visited;\n  }\n\n  set visited(v: boolean) {\n    if (this.#visited !== v) {\n      this.#visited = v;\n      this.dispatchEvent(CHANGED);\n    }\n  }\n\n  /**\n   * A helper method to add a validator\n   *\n   * @param validator - a validator\n   */\n  addValidator(validator: Validator<Value<M>>): void {\n    this.validators = [...this.#validators, validator];\n    this.dispatchEvent(CHANGED);\n  }\n\n  /**\n   * Append an item to the array value.\n   *\n   * Requires the context model to be an array reference.\n   *\n   * @param item - optional new item value, an empty item is\n   * appended if the argument is omitted\n   */\n  appendItem(item?: Value<ArrayItemModel<M>>): void {\n    if (this.#isArray()) {\n      const itemValueOrEmptyValue = item ?? this.model[_createEmptyItemValue]();\n      const newValue = [...(this.value ?? []), itemValueOrEmptyValue];\n      const newDefaultValue = [...(this.defaultValue ?? []), itemValueOrEmptyValue];\n      this.#setValueState(newValue, newDefaultValue);\n    } else {\n      throw new NotArrayModelError();\n    }\n  }\n\n  /**\n   * Returns a binder node for the nested model instance.\n   *\n   * @param model - The nested model instance\n   */\n  for<N extends AbstractModel>(model: N): BinderNode<N> {\n    const binderNode = getBinderNode(model);\n    if (binderNode.binder !== this.binder) {\n      throw new Error('Unknown binder');\n    }\n\n    return binderNode;\n  }\n\n  prependItem(item?: Value<ArrayItemModel<M>>): void {\n    if (this.#isArray()) {\n      const itemValueOrEmptyValue = item ?? this.model[_createEmptyItemValue]();\n      const newValue = [itemValueOrEmptyValue, ...(this.value ?? [])];\n      const newDefaultValue = [itemValueOrEmptyValue, ...(this.defaultValue ?? [])];\n      this.#setValueState(newValue, newDefaultValue);\n    } else {\n      throw new NotArrayModelError();\n    }\n  }\n\n  removeSelf(): void {\n    if (this.#isArrayItem()) {\n      const newValue = (this.parent.value ?? []).filter((_, i) => i !== this.model[_key]);\n      const newDefaultValue = (this.parent.defaultValue ?? []).filter((_, i) => i !== this.model[_key]);\n      this.parent.#setValueState(newValue, newDefaultValue);\n    } else {\n      throw new NotArrayItemModelError();\n    }\n  }\n\n  /**\n   * Runs all validation callbacks potentially affecting this\n   * or any nested model. Returns the combined array of all\n   * errors as in the errors property.\n   */\n  async validate(): Promise<readonly ValueError[]> {\n    const errors = await Promise.all([\n      ...this.#requestValidationOfDescendants(),\n      ...this.#requestValidationWithAncestors(),\n    ]).then((arr) => arr.flat());\n    this[_setErrorsWithDescendants](errors.length ? errors : undefined);\n    this[_update]();\n    return errors;\n  }\n\n  protected [_clearValidation](): boolean {\n    if (this.#visited) {\n      this.#visited = false;\n      this.dispatchEvent(CHANGED);\n    }\n    let needsUpdate = false;\n    if (this.#ownErrors) {\n      this.#ownErrors = undefined;\n      needsUpdate = true;\n      this.dispatchEvent(CHANGED);\n    }\n    if ([...this.#getChildBinderNodes()].filter((childBinderNode) => childBinderNode[_clearValidation]()).length > 0) {\n      needsUpdate = true;\n    }\n    return needsUpdate;\n  }\n\n  protected [_setErrorsWithDescendants](errors?: readonly ValueError[]): void {\n    const { name } = this;\n    const ownErrors = errors\n      ? (errors.filter((valueError) => getErrorPropertyName(valueError) === name) as ReadonlyArray<\n          ValueError<Value<M>>\n        >)\n      : undefined;\n    const relatedErrors = errors\n      ? errors.filter((valueError) => getErrorPropertyName(valueError).startsWith(name))\n      : undefined;\n    this.#ownErrors = ownErrors;\n    for (const childBinderNode of this.#getChildBinderNodes()) {\n      childBinderNode[_setErrorsWithDescendants](relatedErrors);\n    }\n    this.dispatchEvent(CHANGED);\n  }\n\n  protected [_update](_?: Value<M>): void {\n    if (this.parent) {\n      this.parent[_update]();\n    }\n  }\n\n  protected async [_updateValidation](): Promise<void> {\n    if (this.invalid) {\n      await this.validate();\n    }\n  }\n\n  *#getChildBinderNodes(): Generator<BinderNode, void, void> {\n    if (this.value === undefined || this.defaultValue === undefined) {\n      // Undefined value cannot have child properties and items.\n      return;\n    }\n\n    if (this.#isObject()) {\n      for (const [, getter] of getObjectModelOwnAndParentGetters(this.model)) {\n        const childModel = getter.call(this.model);\n        // We need to skip all non-initialised optional fields here in order\n        // to prevent infinite recursion for circular references in the model.\n        // Here we rely on presence of keys in `defaultValue` to detect all\n        // initialised fields. The keys in `defaultValue` are defined for all\n        // non-optional fields plus those optional fields whose values were\n        // set from initial `binder.read()` or `binder.clear()` or by using a\n        // binder node (e.g., form binding) for a nested field.\n        if (childModel[_key] in (this.defaultValue as Record<never, never>)) {\n          yield getBinderNode(childModel);\n        }\n      }\n    } else if (this.#isArray()) {\n      for (const childBinderNode of this.model) {\n        yield childBinderNode;\n      }\n    }\n  }\n\n  #isArray(): this is BinderNode<ArrayModel> {\n    return this.model instanceof ArrayModel;\n  }\n\n  #isArrayItem(): this is ArrayItemBinderNode<M> {\n    return this.model[_parent] instanceof ArrayModel;\n  }\n\n  #isObject(): this is BinderNode<ObjectModel> {\n    return this.model instanceof ObjectModel;\n  }\n\n  *#requestValidationOfDescendants(): Generator<Promise<readonly ValueError[]>, void, void> {\n    for (const node of this.#getChildBinderNodes()) {\n      yield* node.#runOwnValidators();\n      yield* node.#requestValidationOfDescendants();\n    }\n  }\n\n  *#requestValidationWithAncestors(): Generator<Promise<readonly ValueError[]>, void, void> {\n    yield* this.#runOwnValidators();\n\n    if (this.parent) {\n      yield* this.parent.#requestValidationWithAncestors();\n    }\n  }\n\n  *#runOwnValidators(): Generator<Promise<readonly ValueError[]>, void, void> {\n    const hasInvalidState = this[_validity] && !this[_validity].valid;\n    const hasBadInput = !!this[_validity]?.badInput;\n\n    // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n    if ((hasInvalidState && !hasBadInput) || !hasInvalidState) {\n      for (const validator of this.#validators) {\n        yield this.binder.requestValidation(this.model, validator);\n      }\n    }\n\n    if (hasInvalidState) {\n      yield this.binder.requestValidation(this.model, this.#validityStateValidator);\n    }\n  }\n\n  initializeValue(forceInitialize = false): void {\n    // First, make sure parents have value initialized\n    if (\n      this.parent &&\n      (this.parent.value === undefined || (this.parent.defaultValue as Value<M> | undefined) === undefined)\n    ) {\n      this.parent.initializeValue(true);\n    }\n\n    const key = this.model[_key];\n    let value: Value<M> | undefined = this.parent\n      ? (this.parent.value as Record<typeof key, Value<M>>)[this.model[_key]]\n      : undefined;\n\n    const defaultValue: Value<M> | undefined = this.parent\n      ? (this.parent.defaultValue as Readonly<Record<typeof key, Value<M>>>)[this.model[_key]]\n      : undefined;\n\n    if (value === undefined) {\n      // Initialize value if this is the root level node, or it is enforced\n      if (forceInitialize || !this.parent) {\n        value = this.model.constructor.createEmptyValue() as Value<M>;\n        this.#setValueState(value, defaultValue === undefined ? value : defaultValue);\n      } else if (\n        this.parent.model instanceof ObjectModel &&\n        !(key in ((this.parent.value || {}) as Partial<Record<typeof key, Value<M>>>))\n      ) {\n        this.#setValueState(undefined, defaultValue === undefined ? value : defaultValue);\n      }\n    }\n  }\n\n  #setValueState(value: Value<M> | undefined, defaultValue: Value<M> | undefined): void {\n    const { parent } = this;\n    if (parent) {\n      const key = this.model[_key];\n      const parentValue = updateObjectOrArrayKey(parent.model, parent.value, key, value);\n      const keepPristine = value === defaultValue && parent.value === parent.defaultValue;\n      if (keepPristine) {\n        // Keep value and defaultValue equal, so that `dirty` stays false\n        parent.#setValueState(parentValue, parentValue);\n      } else if (defaultValue !== undefined) {\n        // Update value and defaultValue at the same time with different content\n        const parentDefaultValue = updateObjectOrArrayKey(parent.model, parent.defaultValue, key, defaultValue);\n        parent.#setValueState(parentValue, parentDefaultValue);\n      } else {\n        parent.#setValueState(parentValue, undefined);\n      }\n    } else {\n      // Root level model - update the binder root\n      const binder = this as unknown as BinderRoot<M>;\n      if (defaultValue !== undefined) {\n        binder.defaultValue = defaultValue;\n      }\n      binder.value = value!;\n    }\n  }\n}\n", "/* eslint-disable accessor-pairs,no-void,sort-keys */\nimport { type ElementPart, noChange, nothing, type PropertyPart } from 'lit';\nimport { directive, Directive, type DirectiveParameters, type PartInfo, PartType } from 'lit/directive.js';\nimport { getBinderNode } from './BinderNode.js';\nimport {\n  _fromString,\n  type AbstractModel,\n  ArrayModel,\n  BooleanModel,\n  hasFromString,\n  NumberModel,\n  ObjectModel,\n} from './Models.js';\nimport { StringModel } from './Models.js';\nimport type { ValueError } from './Validation.js';\nimport { _validity, defaultValidity } from './Validity.js';\n\nexport interface FieldBase<T> {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  value: T | undefined;\n}\n\n/**\n * Subset of the HTML constraint validation API with the `checkValidity()` method.\n */\nexport type FieldConstraintValidation = Readonly<{\n  validity: ValidityState;\n  checkValidity(): boolean;\n}>;\n\nexport type FieldElement<T = unknown> = FieldBase<T> & HTMLElement & Partial<FieldConstraintValidation>;\n\nconst props = ['required', 'invalid', 'errorMessage', 'value', 'validity', 'checkValidity'];\n\nexport function isFieldElement<T>(element: HTMLElement): element is FieldElement<T> {\n  return props.some((prop) => prop in element);\n}\n\ninterface FieldElementHolder<T> {\n  get element(): FieldElement<T>;\n\n  /**\n   * @param element - the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: FieldElement<T>);\n}\n\ninterface Field<T> extends FieldBase<T> {\n  readonly model?: AbstractModel<T>;\n}\n\ninterface FieldState<T> extends Field<T>, FieldElementHolder<T> {\n  name: string;\n  validity: ValidityState;\n  strategy: FieldStrategy<T>;\n}\n\ntype EventHandler = (event: Event) => void;\n\nexport type FieldStrategy<T = any> = Field<T> &\n  FieldConstraintValidation & {\n    onChange?: EventHandler;\n    onInput?: EventHandler;\n    removeEventListeners(): void;\n  };\n\nexport abstract class AbstractFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>>\n  implements FieldStrategy<T>\n{\n  abstract required: boolean;\n\n  abstract invalid: boolean;\n\n  readonly model?: AbstractModel<T>;\n\n  #element: E;\n\n  /**\n   * @privateRemarks\n   * Fallback for missing .validity property API in Vaadin components.\n   */\n  #validityFallback: ValidityState = defaultValidity;\n\n  readonly #eventHandlers = new Map<string, EventHandler>();\n\n  constructor(element: E, model?: AbstractModel<T>) {\n    this.#element = element;\n    this.model = model;\n  }\n\n  get element(): E {\n    return this.#element;\n  }\n\n  /**\n   * @param element - the new element value\n   * @deprecated will be read-only in future\n   */\n  set element(element: E) {\n    this.#element = element;\n  }\n\n  get value(): T | undefined {\n    return this.#element.value;\n  }\n\n  set value(value: T | undefined) {\n    if (this.model instanceof StringModel || this.model instanceof NumberModel) {\n      this.#element.value = value ?? ('' as T);\n      return;\n    }\n    this.#element.value = value;\n  }\n\n  set errorMessage(_: string) {}\n\n  get validity(): ValidityState {\n    return this.#element.validity ?? this.#validityFallback;\n  }\n\n  get onChange(): EventHandler | undefined {\n    return this.#eventHandlers.get('change');\n  }\n\n  set onChange(onChange: EventHandler | undefined) {\n    this.#setEventHandler('change', onChange);\n  }\n\n  get onInput(): EventHandler | undefined {\n    return this.#getEventHandler('input');\n  }\n\n  set onInput(onInput: EventHandler | undefined) {\n    this.#setEventHandler('input', onInput);\n  }\n\n  checkValidity(): boolean {\n    if (!this.#element.checkValidity) {\n      return true;\n    }\n\n    const valid = this.#element.checkValidity();\n    this.#validityFallback = {\n      ...defaultValidity,\n      valid,\n      ...(valid ? {} : this.#detectValidityError()),\n    };\n    return valid;\n  }\n\n  setAttribute(key: string, val: any): void {\n    if (val) {\n      this.#element.setAttribute(key, '');\n    } else {\n      this.#element.removeAttribute(key);\n    }\n  }\n\n  removeEventListeners(): void {\n    for (const [type, handler] of this.#eventHandlers) {\n      this.element.removeEventListener(type, handler);\n      this.#eventHandlers.delete(type);\n    }\n  }\n\n  #getEventHandler(type: string): EventHandler | undefined {\n    return this.#eventHandlers.get(type);\n  }\n\n  #setEventHandler(type: string, handler?: EventHandler) {\n    if (this.#eventHandlers.has(type)) {\n      this.element.removeEventListener(type, this.#eventHandlers.get(type)!);\n    }\n\n    if (handler) {\n      this.element.addEventListener(type, handler);\n      this.#eventHandlers.set(type, handler);\n    } else {\n      this.#eventHandlers.delete(type);\n    }\n  }\n\n  #detectValidityError(): Readonly<Partial<ValidityState>> {\n    if (!('inputElement' in this.#element)) {\n      // Not a Vaadin component field\n      return { customError: true };\n    }\n\n    const inputElement = this.#element.inputElement as FieldElement<string>;\n\n    if (this.#element.value === '') {\n      if (inputElement.value === '') {\n        return { valueMissing: true };\n      }\n      // Some value is entered, but not meaningful to the\n      // web component — assume parse error.\n      return { badInput: true };\n    }\n    // Unknown constraint violation\n    return { customError: true };\n  }\n}\n\nexport class VaadinFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>> extends AbstractFieldStrategy<\n  T,\n  E\n> {\n  #invalid = false;\n  readonly #boundOnValidated = this.#onValidated.bind(this);\n  readonly #boundOnUnparsableChange = this.#onUnparsableChange.bind(this);\n\n  constructor(element: E, model?: AbstractModel<T>) {\n    super(element, model);\n    element.addEventListener('validated', this.#boundOnValidated);\n    element.addEventListener('unparsable-change', this.#boundOnUnparsableChange);\n  }\n\n  set required(value: boolean) {\n    this.element.required = value;\n  }\n\n  set invalid(value: boolean) {\n    this.#invalid = value;\n    this.element.invalid = value;\n  }\n\n  override set errorMessage(value: string) {\n    this.element.errorMessage = value;\n  }\n\n  override removeEventListeners(): void {\n    this.element.removeEventListener('validated', this.#boundOnValidated);\n    this.element.removeEventListener('unparsable-change', this.#boundOnUnparsableChange);\n  }\n\n  #onValidated(e: Event): void {\n    if (!(e instanceof CustomEvent) || typeof e.detail !== 'object') {\n      return;\n    }\n\n    // Override built-in changes of the `invalid` flag in Vaadin components\n    // to keep the `invalid` property state of the web component in sync.\n    const invalid = !((e.detail ?? {}) as Partial<ValidityState>).valid;\n    if (this.#invalid !== invalid) {\n      this.element.invalid = this.#invalid;\n    }\n\n    // Some user interactions in Vaadin components do not dispatch `input`\n    // event, such as validation upon closing the overlay, pressing Enter key.\n    // One notable example is <vaadin-date-picker>. Use `validated` event in\n    // addition to standard input events to handle those.\n    this.onInput?.call(this.element, e);\n  }\n\n  #onUnparsableChange(e: Event) {\n    this.onChange?.call(this.element, e);\n  }\n\n  override checkValidity(): boolean {\n    // Ignore the `invalid` property of the Vaadin component to avoid\n    // reading the component's internal old validation state and validate\n    // the element based on the current state.\n    const isElementInvalid = this.element.invalid;\n    this.element.invalid = false;\n    const valid = super.checkValidity();\n    this.element.invalid = isElementInvalid;\n    return valid;\n  }\n}\n\nexport class GenericFieldStrategy<T = any, E extends FieldElement<T> = FieldElement<T>> extends AbstractFieldStrategy<\n  T,\n  E\n> {\n  set required(value: boolean) {\n    this.setAttribute('required', value);\n  }\n\n  set invalid(value: boolean) {\n    this.setAttribute('invalid', value);\n  }\n}\n\ntype CheckedFieldElement<T> = FieldElement<T> & {\n  checked: boolean;\n};\n\nexport class CheckedFieldStrategy<\n  T = any,\n  E extends CheckedFieldElement<T> = CheckedFieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    if (this.model instanceof BooleanModel) {\n      return this.element.checked as T;\n    }\n\n    return this.element.checked ? this.element.value : undefined;\n  }\n\n  override set value(val: T | undefined) {\n    (this.element as { checked: boolean }).checked = /^(true|on)$/iu.test(String(val));\n  }\n}\n\nexport class CheckedGroupFieldStrategy<\n  T = any,\n  E extends FieldElement<T> = FieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    super.value = val ?? ([] as T);\n  }\n}\n\ntype ComboBoxFieldElement<T> = FieldElement<T> & {\n  value: string;\n  selectedItem: T | null;\n};\n\nexport class ComboBoxFieldStrategy<\n  T,\n  E extends ComboBoxFieldElement<T> = ComboBoxFieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    if (this.model && (this.model instanceof ObjectModel || this.model instanceof ArrayModel)) {\n      const { selectedItem } = this.element;\n      return selectedItem ?? undefined;\n    }\n\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    if (this.model instanceof ObjectModel || this.model instanceof ArrayModel) {\n      this.element.selectedItem = val ?? null;\n    } else {\n      super.value = val;\n    }\n  }\n}\n\nexport class VaadinStringFieldStrategy extends VaadinFieldStrategy<string> {\n  override get value(): string | undefined {\n    return super.value;\n  }\n\n  override set value(val: string | undefined) {\n    // Some Vaadin components (e.g. vaadin-time-picker) do not support setting\n    // the value to `null` or `undefined`. Instead, set it to an empty string.\n    super.value = val ?? '';\n  }\n}\nfunction isEmptyObject(val: any): boolean {\n  return val && typeof val === 'object' && !Array.isArray(val) && Object.keys(val).length === 0;\n}\n\nexport class VaadinDateTimeFieldStrategy<\n  T = string,\n  E extends FieldElement<T> = FieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T | undefined {\n    return super.value;\n  }\n\n  override set value(val: T | undefined) {\n    const timestamp = Date.parse(val as string);\n\n    if (!val || isEmptyObject(val) || Number.isNaN(timestamp)) {\n      super.value = '' as T;\n      return;\n    }\n\n    const date = new Date(timestamp);\n    // Convert to ISO 8601 local combined date and time representation\n    const tzOffsetMs = 60 * 1000 * date.getTimezoneOffset();\n    super.value = new Date(timestamp - tzOffsetMs).toISOString().slice(0, 19) as T;\n  }\n}\n\ntype MultiSelectComboBoxFieldElement<T> = FieldElement<T> & {\n  value: never;\n  selectedItems: T;\n};\n\nexport class MultiSelectComboBoxFieldStrategy<\n  T,\n  E extends MultiSelectComboBoxFieldElement<T> = MultiSelectComboBoxFieldElement<T>,\n> extends VaadinFieldStrategy<T, E> {\n  override get value(): T {\n    return this.element.selectedItems;\n  }\n\n  override set value(val: any) {\n    this.element.selectedItems = val;\n  }\n}\n\ntype SelectedFieldElement<T> = FieldElement<T> & {\n  value: never;\n  selected: T;\n};\n\nexport class SelectedFieldStrategy<\n  T,\n  E extends SelectedFieldElement<T> = SelectedFieldElement<T>,\n> extends GenericFieldStrategy<T, E> {\n  override get value(): T {\n    return this.element.selected;\n  }\n\n  override set value(val: T) {\n    this.element.selected = val;\n  }\n}\n\ntype MaybeVaadinElementConstructor = {\n  readonly version?: string;\n};\n\nexport function getDefaultFieldStrategy<T>(elm: FieldElement<T>, model?: AbstractModel<T>): AbstractFieldStrategy<T> {\n  switch (elm.localName) {\n    case 'vaadin-checkbox':\n    case 'vaadin-radio-button':\n      return new CheckedFieldStrategy(elm as CheckedFieldElement<T>, model);\n    case 'vaadin-checkbox-group':\n      return new CheckedGroupFieldStrategy(elm, model);\n    case 'vaadin-combo-box':\n      return new ComboBoxFieldStrategy(elm as ComboBoxFieldElement<T>, model);\n    case 'vaadin-list-box':\n      return new SelectedFieldStrategy(elm as SelectedFieldElement<T>, model);\n    case 'vaadin-multi-select-combo-box':\n      return new MultiSelectComboBoxFieldStrategy(elm as MultiSelectComboBoxFieldElement<T>, model);\n    case 'vaadin-rich-text-editor':\n      return new GenericFieldStrategy(elm, model);\n    case 'vaadin-time-picker':\n      return new VaadinStringFieldStrategy(\n        elm as FieldElement<string>,\n        model as AbstractModel<string>,\n      ) as AbstractFieldStrategy<T>;\n    case 'vaadin-date-time-picker':\n      return new VaadinDateTimeFieldStrategy(elm, model) as AbstractFieldStrategy<T>;\n    default:\n      if (elm.localName === 'input' && /^(checkbox|radio)$/u.test((elm as unknown as HTMLInputElement).type)) {\n        return new CheckedFieldStrategy(elm as CheckedFieldElement<T>, model);\n      }\n      if ((elm.constructor as unknown as MaybeVaadinElementConstructor).version) {\n        return new VaadinFieldStrategy(elm, model);\n      }\n      return new GenericFieldStrategy(elm, model);\n  }\n}\n\nfunction convertFieldValue<T extends AbstractModel>(model: T, fieldValue: unknown) {\n  return typeof fieldValue === 'string' && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;\n}\n\n/**\n * Binds a form field component into a model.\n *\n * Example usage:\n *\n * ```\n * <vaadin-text-field ...=\"${field(model.name)}\">\n * </vaadin-text-field>\n * ```\n */\nexport const field = directive(\n  class extends Directive {\n    fieldState?: FieldState<any>;\n\n    constructor(partInfo: PartInfo) {\n      super(partInfo);\n      if (partInfo.type !== PartType.PROPERTY && partInfo.type !== PartType.ELEMENT) {\n        throw new Error('Use as \"<element {field(...)}\" or <element ...={field(...)}\"');\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    override render(_model: AbstractModel<any>, _effect?: (element: Element) => void) {\n      return nothing;\n    }\n\n    override update(part: ElementPart | PropertyPart, [model, effect]: DirectiveParameters<this>) {\n      const element = part.element as FieldElement & HTMLInputElement;\n\n      const binderNode = getBinderNode(model);\n\n      if (!this.fieldState) {\n        const fieldState = {\n          errorMessage: '',\n          name: '',\n          value: '',\n          required: false,\n          invalid: false,\n          model,\n          validity: defaultValidity,\n          element,\n          strategy: binderNode.binder.getFieldStrategy(element, model),\n        };\n\n        this.fieldState = fieldState;\n\n        const inputHandler = () => {\n          fieldState.strategy.checkValidity();\n          // When bad input is detected, skip reading new value in binder state\n          if (!fieldState.strategy.validity.badInput) {\n            fieldState.value = fieldState.strategy.value;\n          }\n          fieldState.validity = fieldState.strategy.validity;\n          binderNode[_validity] = fieldState.validity;\n          binderNode.value = convertFieldValue(model, fieldState.value);\n          if (effect !== undefined) {\n            effect.call(element, element);\n          }\n        };\n\n        fieldState.strategy.onInput = inputHandler;\n        fieldState.strategy.onChange = () => {\n          inputHandler();\n          void binderNode.validate();\n        };\n\n        const blurHandler = () => {\n          inputHandler();\n          void binderNode.validate();\n          binderNode.visited = true;\n        };\n\n        element.addEventListener('blur', blurHandler);\n      }\n\n      const { fieldState } = this;\n\n      if (fieldState.element !== element || fieldState.model !== model) {\n        const { onInput } = fieldState.strategy;\n        fieldState.strategy = binderNode.binder.getFieldStrategy(element, model);\n        fieldState.strategy.onInput = onInput;\n      }\n\n      const { name } = binderNode;\n      if (name !== fieldState.name) {\n        fieldState.name = name;\n        element.setAttribute('name', name);\n      }\n\n      const { value } = binderNode;\n      const valueFromField = convertFieldValue(model, fieldState.value);\n      if (value !== valueFromField && !(Number.isNaN(value) && Number.isNaN(valueFromField))) {\n        const nonNanValue = Number.isNaN(value) ? '' : value;\n        fieldState.value = nonNanValue;\n        fieldState.strategy.value = nonNanValue;\n      }\n\n      const { required } = binderNode;\n      if (required !== fieldState.required) {\n        fieldState.required = required;\n        fieldState.strategy.required = required;\n      }\n\n      const firstError: ValueError<any> | undefined = binderNode.ownErrors[0];\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const errorMessage = firstError?.message || '';\n      if (errorMessage !== fieldState.errorMessage) {\n        fieldState.errorMessage = errorMessage;\n        fieldState.strategy.errorMessage = errorMessage;\n      }\n\n      const { invalid } = binderNode;\n      if (invalid !== fieldState.invalid) {\n        fieldState.invalid = invalid;\n        fieldState.strategy.invalid = invalid;\n      }\n\n      return noChange;\n    }\n  },\n);\n", "import type { BinderNode } from './BinderNode.js';\nimport { getBinderNode } from './BinderNode.js';\nimport type { BinderRoot } from './BinderRoot.js';\nimport { AbstractModel, type Value } from './Models.js';\nimport { IsNumber, Required, ValidityStateValidator } from './Validators.js';\n\nexport interface ValueError<T = unknown> {\n  property: AbstractModel | string;\n  message: string;\n  value: T;\n  validator: Validator<T>;\n  validatorMessage?: string;\n}\n\nexport interface ValidationResult {\n  property: AbstractModel | string;\n  message?: string;\n}\n\nexport class ValidationError extends Error {\n  errors: readonly ValueError[];\n\n  constructor(errors: readonly ValueError[]) {\n    super(\n      [\n        'There are validation errors in the form.',\n        ...errors.map((e) => {\n          const property = e.property instanceof AbstractModel ? String(getBinderNode(e.property).value) : e.property;\n          return `${property} - ${e.validator.constructor.name}${e.message ? `: ${e.message}` : ''}`;\n        }),\n      ].join('\\n - '),\n    );\n    this.errors = errors;\n    this.name = this.constructor.name;\n  }\n}\n\nexport type InterpolateMessageCallback<M extends AbstractModel> = (\n  message: string,\n  validator: Validator<Value<M>>,\n  binderNode: BinderNode<M>,\n) => string;\n\nexport interface Validator<T = unknown> {\n  message: string;\n  impliesRequired?: boolean;\n  name?: string;\n\n  validate(\n    value: T,\n    binder: BinderRoot,\n  ):\n    | Promise<ValidationResult | boolean | readonly ValidationResult[]>\n    | ValidationResult\n    | boolean\n    | readonly ValidationResult[];\n}\n\nexport class ServerValidator implements Validator {\n  name = 'ServerValidator';\n  message: string;\n\n  constructor(message: string) {\n    this.message = message;\n  }\n\n  validate = (): boolean => false;\n}\n\n// The `property` field of `ValidationResult`s is a path relative to the parent.\nfunction setPropertyAbsolutePath(binderNodeName: string, result: ValidationResult): ValidationResult {\n  if (typeof result.property === 'string' && binderNodeName.length > 0) {\n    result.property = `${binderNodeName}.${result.property}`;\n  }\n  return result;\n}\n\nexport async function runValidator<M extends AbstractModel>(\n  model: M,\n  validator: Validator<Value<M>>,\n  interpolateMessageCallback?: InterpolateMessageCallback<M>,\n): Promise<ReadonlyArray<ValueError<Value<M>>>> {\n  const binderNode = getBinderNode(model);\n  const value = binderNode.value as Value<M>;\n\n  const interpolateMessage = (message: string) => {\n    if (!interpolateMessageCallback) {\n      return message;\n    }\n    return interpolateMessageCallback(message, validator, binderNode);\n  };\n\n  // If model is not required and value empty, do not run any validator. Except\n  // always validate NumberModel, which has a mandatory builtin validator\n  // to indicate NaN input.\n  if (\n    !binderNode.required &&\n    !new Required().validate(value) &&\n    !(validator instanceof IsNumber) &&\n    !(validator instanceof ValidityStateValidator)\n  ) {\n    return [];\n  }\n\n  try {\n    const result = await validator.validate(value, binderNode.binder);\n\n    if (result === false) {\n      return [\n        {\n          message: interpolateMessage(validator.message),\n          property: binderNode.name,\n          validator,\n          value,\n        },\n      ];\n    }\n\n    if (result === true || (Array.isArray(result) && result.length === 0)) {\n      return [];\n    }\n\n    if (Array.isArray(result)) {\n      return result.map((result2) => ({\n        message: interpolateMessage(validator.message),\n        ...setPropertyAbsolutePath(binderNode.name, result2),\n        validator,\n        value,\n      }));\n    }\n\n    return [\n      {\n        message: interpolateMessage(validator.message),\n        ...setPropertyAbsolutePath(binderNode.name, result as ValidationResult),\n        validator,\n        value,\n      },\n    ];\n  } catch (error: unknown) {\n    console.error(`${binderNode.name} - Validator ${validator.constructor.name} threw an error:`, error);\n    return [{ message: 'Validator threw an error', property: binderNode.name, validator, value }];\n  }\n}\n", "import { EndpointValidationError, type ValidationErrorData } from '@vaadin/hilla-frontend/EndpointErrors.js';\nimport { _clearValidation, _setErrorsWithDescendants, _update, BinderNode, CHANGED } from './BinderNode.js';\nimport { type FieldElement, type FieldStrategy, getDefaultFieldStrategy } from './Field.js';\nimport {\n  _parent,\n  type AbstractModel,\n  createDetachedModel,\n  type DetachedModelConstructor,\n  type Value,\n} from './Models.js';\nimport type { ClassStaticProperties } from './types.js';\nimport {\n  type InterpolateMessageCallback,\n  runValidator,\n  ServerValidator,\n  ValidationError,\n  type Validator,\n  type ValueError,\n} from './Validation.js';\n\nexport type BinderConfiguration<T> = Readonly<{\n  onChange?(oldValue?: T): void;\n  onSubmit?(value: T): Promise<T | undefined | void>;\n}>;\n\nexport type BinderRootConfiguration<T> = BinderConfiguration<T> &\n  Readonly<{\n    context?: unknown;\n  }>;\n\n/**\n * A simplified Binder that does not require a context.\n * It can be used as root when there is no Element to use as context.\n *\n * @typeParam T - Type of the value that binds to a form\n * @typeParam M - Type of the model that describes the structure of the value\n */\nexport class BinderRoot<M extends AbstractModel = AbstractModel> extends BinderNode<M> {\n  static interpolateMessageCallback?: InterpolateMessageCallback<any>;\n\n  #defaultValue!: Value<M>; // Initialized in the `read()` method\n\n  #value!: Value<M>; // Initialized in the `read()` method\n\n  readonly #emptyValue: Value<M>;\n\n  #submitting = false;\n\n  #validating = false;\n\n  #validationRequest?: Promise<void>;\n\n  readonly #config?: BinderRootConfiguration<Value<M>>;\n\n  readonly #validations = new Map<AbstractModel, Map<Validator, Promise<readonly ValueError[]>>>();\n\n  readonly #context: unknown = this;\n\n  declare readonly ['constructor']: ClassStaticProperties<typeof BinderRoot<M>>;\n\n  /**\n   *\n   * @param Model - The constructor (the class reference) of the form model. The Binder instantiates the top-level model\n   * @param config - The options object, which can be used to config the onChange and onSubmit callbacks.\n   *\n   * ```\n   * binder = new BinderRoot(OrderModel);\n   * or\n   * binder = new BinderRoot(OrderModel, {onSubmit: async (order) => {endpoint.save(order)}});\n   * ```\n   */\n  constructor(Model: DetachedModelConstructor<M>, config?: BinderRootConfiguration<Value<M>>) {\n    super(createDetachedModel(Model));\n    // @ts-expect-error the model's parent is the binder\n    this.model[_parent] = this;\n    this.#context = config?.context ?? this;\n    this.#config = config;\n    // Initialize value instead of the parent.\n    this.initializeValue(true);\n    this.#emptyValue = this.value;\n  }\n\n  /**\n   * The initial value of the form, before any fields are edited by the user.\n   */\n  override get defaultValue(): Value<M> {\n    return this.#defaultValue;\n  }\n\n  override set defaultValue(newValue: Value<M>) {\n    this.#defaultValue = newValue;\n    this.dispatchEvent(CHANGED);\n  }\n\n  override get binder(): BinderRoot {\n    return this as BinderRoot;\n  }\n\n  /**\n   * The current value of the form.\n   */\n  override get value(): Value<M> {\n    return this.#value;\n  }\n\n  override set value(newValue: Value<M>) {\n    if (newValue === this.#value) {\n      return;\n    }\n\n    const oldValue = this.#value;\n    this.#value = newValue;\n    this[_update](oldValue);\n  }\n\n  /**\n   * Indicates the submitting status of the form.\n   * True if the form was submitted, but the submit promise is not resolved yet.\n   */\n  get submitting(): boolean {\n    return this.#submitting;\n  }\n\n  /**\n   * Indicates the validating status of the form.\n   * True when there is an ongoing validation.\n   */\n  get validating(): boolean {\n    return this.#validating;\n  }\n\n  /**\n   * Read the given value into the form and clear validation errors. Clears the form if the value is undefined.\n   *\n   * @param value - The value to read, or undefined to clear.\n   */\n  read(value: Value<M> | null | undefined): void {\n    if (value === undefined || value === null) {\n      this.clear();\n      return;\n    }\n    this.defaultValue = value;\n    if (\n      // Skip when no value is set yet (e.g., invoked from constructor)\n      this.value &&\n      // Clear validation state, then proceed if update is needed\n      this[_clearValidation]() &&\n      // When value is dirty, another update is coming from invoking the value\n      // setter below, so we skip this one to prevent duplicate updates\n      this.value === value\n    ) {\n      this[_update](this.value);\n    }\n\n    this.value = this.defaultValue;\n  }\n\n  /**\n   * Reset the form to the previous value\n   */\n  reset(): void {\n    this.read(this.#defaultValue);\n  }\n\n  /**\n   * Sets the form to empty value, as defined in the Model.\n   */\n  clear(): void {\n    this.read(this.#emptyValue);\n  }\n\n  /**\n   * Submit the current form value to a predefined\n   * onSubmit callback.\n   *\n   * It's a no-op if the onSubmit callback is undefined.\n   */\n  async submit(): Promise<Value<M> | undefined | void> {\n    const onSubmit = this.#config?.onSubmit;\n    if (onSubmit) {\n      return this.submitTo(onSubmit);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Submit the current form value to callback\n   *\n   * @param endpointMethod - the callback function\n   */\n  async submitTo<V>(endpointMethod: (value: Value<M>) => Promise<V>): Promise<V> {\n    const errors = await this.validate();\n    if (errors.length) {\n      throw new ValidationError(errors);\n    }\n\n    this.#submitting = true;\n    this[_update](this.value);\n    this.dispatchEvent(CHANGED);\n    try {\n      return await endpointMethod.call(this.#context, this.value);\n    } catch (error: unknown) {\n      if (error instanceof EndpointValidationError && error.validationErrorData.length) {\n        const valueErrors: Array<ValueError<any>> = [];\n        error.validationErrorData.forEach((data: ValidationErrorData) => {\n          const res =\n            /Object of type '(.+)' has invalid property '(.+)' with value '(.+)', validation error: '(.+)'/u.exec(\n              data.message,\n            );\n          const [property, value, message] = res ? res.splice(2) : [data.parameterName ?? '', undefined, data.message];\n          valueErrors.push({\n            message,\n            // Convert property from bracket notation to dot notation\n            // Example: 'orders[0].description' becomes 'orders.0.description'\n            property: property.replace(/\\[(\\d+)\\]/gu, '.$1'),\n            validator: new ServerValidator(message),\n            value,\n            validatorMessage: data.validatorMessage,\n          });\n        });\n        this[_setErrorsWithDescendants](valueErrors);\n        throw new ValidationError(valueErrors);\n      }\n\n      throw error;\n    } finally {\n      this.#submitting = false;\n      this.defaultValue = this.value;\n      this[_update](this.value);\n    }\n  }\n\n  async requestValidation<NM extends AbstractModel>(\n    model: NM,\n    validator: Validator<Value<NM>>,\n  ): Promise<ReadonlyArray<ValueError<Value<NM>>>> {\n    let modelValidations: Map<Validator<Value<NM>>, Promise<ReadonlyArray<ValueError<Value<NM>>>>>;\n\n    if (this.#validations.has(model)) {\n      modelValidations = this.#validations.get(model) as Map<\n        Validator<Value<NM>>,\n        Promise<ReadonlyArray<ValueError<Value<NM>>>>\n      >;\n    } else {\n      modelValidations = new Map();\n      this.#validations.set(model, modelValidations);\n    }\n\n    await this.performValidation();\n\n    if (modelValidations.has(validator)) {\n      return modelValidations.get(validator)!;\n    }\n\n    const promise = runValidator(model, validator, this.constructor.interpolateMessageCallback);\n    modelValidations.set(validator, promise);\n    const valueErrors = await promise;\n\n    modelValidations.delete(validator);\n    if (modelValidations.size === 0) {\n      this.#validations.delete(model);\n    }\n    if (this.#validations.size === 0) {\n      this.completeValidation();\n    }\n\n    return valueErrors;\n  }\n\n  /**\n   * Determines and returns the field directive strategy for the bound element.\n   * Override to customise the binding strategy for a component.\n   * The Binder extends BinderNode, see the inherited properties and methods below.\n   *\n   * @param elm - the bound element\n   * @param model - the bound model\n   */\n  // eslint ignored to allow overriding\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  getFieldStrategy<TField>(elm: HTMLElement, model?: AbstractModel<TField>): FieldStrategy {\n    return getDefaultFieldStrategy(elm as FieldElement, model);\n  }\n\n  protected performValidation(): Promise<void> | void {\n    if (!this.#validationRequest) {\n      this.#validating = true;\n      this.dispatchEvent(CHANGED);\n      this.#validationRequest = Promise.resolve().then(() => {\n        this.#validationRequest = undefined;\n      });\n    }\n    return this.#validationRequest;\n  }\n\n  protected completeValidation(): void {\n    this.#validating = false;\n    this.dispatchEvent(CHANGED);\n  }\n\n  protected override [_update](oldValue: Value<M>): void {\n    this.#config?.onChange?.call(this.#context, oldValue);\n    this.dispatchEvent(CHANGED);\n  }\n}\n", "export * from './Binder.js';\nexport * from './BinderRoot.js';\nexport * from './BinderNode.js';\nexport * from './Field.js';\nexport * from './Models.js';\nexport * from './Validation.js';\nexport * from './Validators.js';\nexport * from './Validity.js';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n((feature, vaadinObj = (window.Vaadin ??= {})) => {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `@vaadin/hilla-lit-form/${feature}` : '@vaadin/hilla-lit-form',\n    version: '24.7.2',\n  });\n})();\n", "import { _enum, type EnumModel } from '@vaadin/hilla-lit-form';\nimport { DatePicker } from '@vaadin/react-components/DatePicker.js';\nimport type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport { Item } from '@vaadin/react-components/Item.js';\nimport { ListBox } from '@vaadin/react-components/ListBox.js';\nimport { NumberField } from '@vaadin/react-components/NumberField.js';\nimport { Select, type SelectElement } from '@vaadin/react-components/Select.js';\nimport { TextField, type TextFieldElement } from '@vaadin/react-components/TextField.js';\nimport { TimePicker } from '@vaadin/react-components/TimePicker.js';\nimport {\n  type ComponentType,\n  type JSX,\n  type ReactElement,\n  type RefObject,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { ColumnContext, CustomColumnContext } from './autogrid-column-context.js';\nimport { useDatePickerI18n } from './locale.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\nimport Matcher from './types/com/vaadin/hilla/crud/filter/PropertyStringFilter/Matcher.js';\nimport type PropertyStringFilter from './types/com/vaadin/hilla/crud/filter/PropertyStringFilter.js';\nimport { convertToTitleCase } from './util';\n\ntype ExtractComponentTypeProps<T extends ComponentType<any>> = T extends ComponentType<infer U> ? U : never;\n\nexport type HeaderRendererProps = ExtractComponentTypeProps<\n  NonNullable<Required<GridColumnProps<unknown>>['headerRenderer']>\n>;\n\nexport type HeaderFilterRendererProps = HeaderRendererProps & {\n  /**\n   * Allows to set custom filters for the column.\n   * This is used by the header filter components.\n   * @param filter - The filter to set in the filter list.\n   */\n  setFilter(filter: FilterUnion): void;\n};\n\nexport type HeaderFilterProps = Readonly<{\n  /**\n   * If true, the column can be sorted. This is useful to disable sorting for\n   * properties that are not sortable in the backend, or that require excessive processing.\n   */\n  sortable?: boolean;\n  /**\n   * If true, the column can be filtered. This is useful to disable filtering for\n   * properties that are not sortable in the backend, or that require excessive processing.\n   */\n  filterable?: boolean;\n  /**\n   * Placeholder text for the filter input.\n   * Only applies to string, number and date/time value filters.\n   */\n  filterPlaceholder?: string;\n  /**\n   * Debounce time for the filter input in milliseconds.\n   * Only applies to string value filters and number value filters.\n   */\n  filterDebounceTime?: number;\n  /**\n   * Minimum length for the filter input.\n   * Only applies to string value filters.\n   */\n  filterMinLength?: number;\n\n  /**\n   * Custom renderer for the filter in the header.\n   */\n  headerFilterRenderer?: ComponentType<HeaderFilterRendererProps>;\n}>;\n\nfunction useFilterState(initialMatcher: Matcher) {\n  const context = useContext(ColumnContext)!;\n  const [matcher, setMatcher] = useState(initialMatcher);\n  const [filterValue, setFilterValue] = useState('');\n\n  function updateFilter(newMatcher: Matcher, newFilterValue: string) {\n    setFilterValue(newFilterValue);\n    setMatcher(newMatcher);\n\n    const filter: PropertyStringFilter = {\n      propertyId: context.propertyInfo.name,\n      filterValue: newFilterValue,\n      matcher: newMatcher,\n      '@type': 'propertyString',\n    };\n    context.setColumnFilter(filter, context.filterKey);\n  }\n\n  return { matcher, filterValue, updateFilter };\n}\n\n// Workaround for https://github.com/vaadin/react-components/issues/148\nfunction useSelectInitWorkaround(selectRef: RefObject<SelectElement | null>) {\n  useEffect(() => {\n    setTimeout(() => {\n      if (selectRef.current) {\n        selectRef.current.requestContentUpdate();\n      }\n    }, 1);\n  }, []);\n}\n\n// extracted component (and type) to avoid code duplication\ntype ComparationSelectionProps = Readonly<{\n  value: Matcher;\n  onMatcherChanged(matcher: Matcher): void;\n  isDateTimeType?: boolean;\n}>;\n\nfunction ComparationSelection({ onMatcherChanged, value, isDateTimeType }: ComparationSelectionProps): ReactElement {\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  return (\n    <Select\n      theme=\"small\"\n      className=\"auto-grid-comparation-selection\"\n      ref={select}\n      value={value}\n      onValueChanged={({ detail }) => {\n        onMatcherChanged(detail.value as Matcher);\n      }}\n      renderer={() => (\n        <ListBox>\n          <Item value={Matcher.GREATER_THAN} {...{ label: '>' }}>\n            {isDateTimeType ? '> After' : '> Greater than'}\n          </Item>\n          <Item value={Matcher.LESS_THAN} {...{ label: '<' }}>\n            {isDateTimeType ? '< Before' : '< Less than'}\n          </Item>\n          <Item value={Matcher.EQUALS} {...{ label: '=' }}>\n            = Equals\n          </Item>\n        </ListBox>\n      )}\n    ></Select>\n  );\n}\n\nexport function StringHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { filterPlaceholder, filterDebounceTime, filterMinLength } = context.customColumnOptions ?? {};\n  const { updateFilter } = useFilterState(Matcher.CONTAINS);\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (filterMinLength && inputValue && inputValue.length < filterMinLength) {\n      updateFilter(Matcher.CONTAINS, '');\n      return () => {};\n    }\n\n    const delayInputTimeoutId = setTimeout(() => {\n      updateFilter(Matcher.CONTAINS, inputValue);\n    }, filterDebounceTime ?? 200);\n    return () => clearTimeout(delayInputTimeoutId);\n  }, [inputValue]);\n\n  return (\n    <div className=\"auto-grid-string-filter\">\n      <TextField\n        theme=\"small\"\n        placeholder={filterPlaceholder ?? 'Filter...'}\n        onInput={(e: any) => {\n          const fieldValue = ((e as InputEvent).target as TextFieldElement).value;\n          setInputValue(fieldValue);\n        }}\n      ></TextField>\n    </div>\n  );\n}\n\nexport function NumberHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { filterPlaceholder, filterDebounceTime } = context.customColumnOptions ?? {};\n  const [inputValue, setInputValue] = useState('');\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  useEffect(() => {\n    const delayInputTimeoutId = setTimeout(() => {\n      updateFilter(matcher, inputValue);\n    }, filterDebounceTime ?? 200);\n    return () => clearTimeout(delayInputTimeoutId);\n  }, [inputValue]);\n\n  return (\n    <div className=\"auto-grid-number-filter\">\n      <ComparationSelection value={matcher} onMatcherChanged={(m) => updateFilter(m, filterValue)} />\n      <NumberField\n        theme=\"small\"\n        placeholder={filterPlaceholder ?? 'Filter...'}\n        onInput={(e) => {\n          const fieldValue = ((e as InputEvent).target as TextFieldElement).value;\n          setInputValue(fieldValue);\n        }}\n      />\n    </div>\n  );\n}\n\nexport function EnumHeaderFilter(): ReactElement {\n  const { filterValue, updateFilter } = useFilterState(Matcher.EQUALS);\n  const context = useContext(ColumnContext)!;\n  const model = context.propertyInfo.model as EnumModel;\n  const options = [\n    {\n      value: '',\n      label: '',\n    },\n    ...Object.keys(model[_enum]).map((value) => ({\n      label: convertToTitleCase(value),\n      value,\n    })),\n  ];\n  return (\n    <div className=\"auto-grid-enum-filter\">\n      <Select\n        theme=\"small\"\n        items={options}\n        value={filterValue}\n        onValueChanged={(e) => {\n          const newFilterValue = e.detail.value;\n          updateFilter(Matcher.EQUALS, newFilterValue);\n        }}\n      />\n    </div>\n  );\n}\n\nexport function BooleanHeaderFilter(): ReactElement {\n  const { filterValue, updateFilter } = useFilterState(Matcher.EQUALS);\n  const select = useRef<SelectElement>(null);\n\n  useSelectInitWorkaround(select);\n\n  return (\n    <div className=\"auto-grid-boolean-filter\">\n      <Select\n        theme=\"small\"\n        ref={select}\n        onValueChanged={(e) => {\n          const newFilterValue = e.detail.value;\n          updateFilter(Matcher.EQUALS, newFilterValue);\n        }}\n        renderer={() => (\n          <ListBox>\n            <Item value={''} {...{ label: '' }}></Item>\n            <Item value={'True'} {...{ label: 'Yes' }}>\n              Yes\n            </Item>\n            <Item value={'False'} {...{ label: 'No' }}>\n              No\n            </Item>\n          </ListBox>\n        )}\n        value={filterValue}\n      ></Select>\n    </div>\n  );\n}\n\nexport function DateHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const i18n = useDatePickerI18n();\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const [invalid, setInvalid] = useState(false);\n\n  return (\n    <div className=\"auto-grid-date-filter\">\n      <ComparationSelection\n        value={matcher}\n        onMatcherChanged={(m) => updateFilter(m, filterValue)}\n        isDateTimeType={true}\n      />\n      <DatePicker\n        theme=\"small\"\n        value={filterValue}\n        placeholder={context.customColumnOptions?.filterPlaceholder ?? 'Filter...'}\n        i18n={i18n}\n        onInvalidChanged={({ detail: { value } }) => {\n          setInvalid(value);\n        }}\n        onValueChanged={({ detail: { value } }) => {\n          if (!(invalid || value === filterValue)) {\n            updateFilter(matcher, value);\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport function TimeHeaderFilter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const { matcher, filterValue, updateFilter } = useFilterState(Matcher.GREATER_THAN);\n  const [invalid, setInvalid] = useState(false);\n\n  return (\n    <div className=\"auto-grid-time-filter\">\n      <ComparationSelection\n        value={matcher}\n        onMatcherChanged={(m) => updateFilter(m, filterValue)}\n        isDateTimeType={true}\n      />\n      <TimePicker\n        theme=\"small\"\n        value={filterValue}\n        placeholder={context.customColumnOptions?.filterPlaceholder ?? 'Filter...'}\n        onInvalidChanged={({ detail: { value } }) => {\n          setInvalid(value);\n        }}\n        onValueChanged={({ detail: { value } }) => {\n          if (!(invalid || value === filterValue)) {\n            updateFilter(matcher, value);\n          }\n        }}\n      />\n    </div>\n  );\n}\n\nexport function NoHeaderFilter(): ReactElement {\n  return <></>;\n}\n\nexport function HeaderFilterWrapper({ original }: HeaderRendererProps): JSX.Element | null {\n  const context = useContext(ColumnContext);\n  const customContext = useContext(CustomColumnContext);\n  const { setColumnFilter, headerFilterRenderer: HeaderFilterRenderer, filterKey } = (context ?? customContext)!;\n\n  function setFilter(filter: FilterUnion) {\n    setColumnFilter(filter, filterKey);\n  }\n\n  return <HeaderFilterRenderer original={original} setFilter={setFilter} />;\n}\n", "enum Matcher {\n    EQUALS = \"EQUALS\",\n    CONTAINS = \"CONTAINS\",\n    LESS_THAN = \"LESS_THAN\",\n    GREATER_THAN = \"GREATER_THAN\"\n}\nexport default Matcher;\n", "import type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport {\n  AutoGridBooleanRenderer,\n  AutoGridDateRenderer,\n  AutoGridDateTimeRenderer,\n  AutoGridDecimalRenderer,\n  AutoGridEnumRenderer,\n  AutoGridIntegerRenderer,\n  AutoGridJsonRenderer,\n  AutoGridTimeRenderer,\n} from './autogrid-renderers';\nimport {\n  BooleanHeaderFilter,\n  DateHeaderFilter,\n  EnumHeaderFilter,\n  type HeaderFilterProps,\n  NoHeaderFilter,\n  NumberHeaderFilter,\n  StringHeaderFilter,\n  TimeHeaderFilter,\n} from './header-filter';\nimport type { PropertyInfo } from './model-info';\n\nexport type ColumnOptions = HeaderFilterProps & Omit<GridColumnProps<any>, 'dangerouslySetInnerHTML'>;\n\n// eslint-disable-next-line consistent-return\nfunction getTypeColumnOptions(propertyInfo: PropertyInfo, customColumnOptions?: ColumnOptions): ColumnOptions {\n  // eslint-disable-next-line default-case\n  switch (propertyInfo.type) {\n    case 'integer':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridIntegerRenderer,\n        headerFilterRenderer: NumberHeaderFilter,\n      };\n    case 'decimal':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDecimalRenderer,\n        headerFilterRenderer: NumberHeaderFilter,\n      };\n    case 'boolean':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridBooleanRenderer,\n        headerFilterRenderer: BooleanHeaderFilter,\n      };\n    case 'date':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDateRenderer,\n        headerFilterRenderer: DateHeaderFilter,\n      };\n    case 'time':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridTimeRenderer,\n        headerFilterRenderer: TimeHeaderFilter,\n      };\n    case 'datetime':\n      return {\n        autoWidth: true,\n        textAlign: 'end',\n        flexGrow: 0,\n        renderer: AutoGridDateTimeRenderer,\n        headerFilterRenderer: DateHeaderFilter,\n      };\n    case 'enum':\n      return {\n        autoWidth: true,\n        renderer: AutoGridEnumRenderer,\n        headerFilterRenderer: EnumHeaderFilter,\n      };\n    case 'string':\n      return {\n        autoWidth: true,\n        headerFilterRenderer: StringHeaderFilter,\n      };\n    case 'object':\n      return {\n        autoWidth: true,\n        renderer:\n          customColumnOptions?.path !== undefined && customColumnOptions.renderer == null ? null : AutoGridJsonRenderer,\n        headerFilterRenderer: NoHeaderFilter,\n      };\n    default:\n      return {\n        autoWidth: true,\n        headerFilterRenderer: NoHeaderFilter,\n      };\n  }\n}\n\nexport function getColumnOptions(\n  propertyInfo: PropertyInfo,\n  customColumnOptions: ColumnOptions | undefined,\n): ColumnOptions {\n  const typeColumnOptions = getTypeColumnOptions(propertyInfo, customColumnOptions);\n  const headerFilterRenderer =\n    customColumnOptions?.filterable === false\n      ? NoHeaderFilter\n      : (typeColumnOptions.headerFilterRenderer ?? NoHeaderFilter);\n  // TODO: Remove eslint-disable when all TypeScript version issues are resolved\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  return customColumnOptions\n    ? { ...typeColumnOptions, headerFilterRenderer, ...customColumnOptions }\n    : typeColumnOptions;\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-grid-comparation-selection{--vaadin-field-default-width:2em}.auto-grid-comparation-selection>vaadin-select-value-button{--_lumo-text-field-overflow-mask-image:none!important;color:var(--lumo-secondary-text-color)}.auto-grid-comparation-selection::part(toggle-button){display:none}.auto-grid-string-filter{display:flex}.auto-grid-string-filter vaadin-text-field{flex:1 1 0;width:100px}.auto-grid-boolean-filter{display:flex}.auto-grid-boolean-filter vaadin-select{flex:1 1 0;width:80px}.auto-grid-boolean-filter vaadin-select-item{font-size:14px}.auto-grid-number-filter{display:flex}.auto-grid-number-filter vaadin-number-field{flex:1 1 0;width:100px}.auto-grid-number-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-number-filter vaadin-number-field::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}.auto-grid-enum-filter{display:flex}.auto-grid-enum-filter vaadin-select{flex:1 1 0;width:120px}.auto-grid-enum-filter vaadin-select-item{font-size:14px}.auto-grid-date-filter{display:flex}.auto-grid-date-filter vaadin-date-picker{flex:1 1 0;width:120px}.auto-grid-date-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-date-filter vaadin-date-picker::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}.auto-grid-time-filter{display:flex}.auto-grid-time-filter vaadin-time-picker{flex:1 1 0;width:100px}.auto-grid-time-filter vaadin-select::part(input-field){border-bottom-right-radius:0;border-top-right-radius:0}.auto-grid-time-filter vaadin-time-picker::part(input-field){border-bottom-left-radius:0;border-top-left-radius:0}`);export default css;", "import type {\n  ComboBoxDataProvider,\n  ComboBoxDataProviderCallback,\n  ComboBoxDataProviderParams,\n} from '@vaadin/react-components';\nimport type { GridDataProvider, GridDataProviderCallback, GridDataProviderParams } from '@vaadin/react-components/Grid';\nimport { useMemo, useState, type DependencyList } from 'react';\nimport type { CountService, ListService } from './crud.js';\nimport type FilterUnion from './types/com/vaadin/hilla/crud/filter/FilterUnion.js';\nimport type Pageable from './types/com/vaadin/hilla/mappedtypes/Pageable.js';\nimport type Sort from './types/com/vaadin/hilla/mappedtypes/Sort.js';\nimport Direction from './types/org/springframework/data/domain/Sort/Direction.js';\nimport NullHandling from './types/org/springframework/data/domain/Sort/NullHandling.js';\n\ntype MaybeCountService<TItem> = Partial<CountService<TItem>>;\ntype ListAndMaybeCountService<TItem> = ListService<TItem> & MaybeCountService<TItem>;\ntype ListAndCountService<TItem> = CountService<TItem> & ListService<TItem>;\n\ntype PageRequest = {\n  pageNumber: number;\n  pageSize: number;\n  sort: Sort;\n};\n\ntype DataPage<TItem> = {\n  items: TItem[];\n  pageRequest: PageRequest;\n};\n\nexport type ItemCounts = {\n  totalCount?: number;\n  filteredCount?: number;\n};\n\ntype AfterLoadCallback = (result: ItemCounts) => void;\n\ntype DataProviderOptions = {\n  initialFilter?: FilterUnion;\n  loadTotalCount?: boolean;\n  afterLoad?: AfterLoadCallback;\n};\n\nfunction createSort<TItem>(params: GridDataProviderParams<TItem>): Sort {\n  return {\n    orders: params.sortOrders\n      .filter((order) => order.direction != null)\n      .map((order) => ({\n        property: order.path,\n        direction: order.direction === 'asc' ? Direction.ASC : Direction.DESC,\n        ignoreCase: false,\n        nullHandling: NullHandling.NATIVE,\n      })),\n  };\n}\n\nexport function isCountService<TItem>(service: ListAndMaybeCountService<TItem>): service is ListAndCountService<TItem> {\n  return !!service.count;\n}\n\nexport abstract class DataProvider<TItem> {\n  protected readonly service: ListAndMaybeCountService<TItem>;\n  protected readonly loadTotalCount?: boolean;\n  protected readonly afterLoadCallback?: AfterLoadCallback;\n\n  protected filter: FilterUnion | undefined;\n  protected totalCount: number | undefined;\n  protected filteredCount: number | undefined;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    this.service = service;\n    this.filter = options.initialFilter;\n    this.loadTotalCount = options.loadTotalCount;\n    this.afterLoadCallback = options.afterLoad;\n\n    this.load = this.load.bind(this);\n  }\n\n  reset(): void {\n    this.totalCount = undefined;\n    this.filteredCount = undefined;\n  }\n\n  setFilter(filter: FilterUnion | undefined): void {\n    this.reset();\n    this.filter = filter;\n  }\n\n  async load(params: GridDataProviderParams<TItem>, callback: GridDataProviderCallback<TItem>): Promise<void> {\n    // Fetch page and filtered count\n    const page = await this.fetchPage(params);\n    this.filteredCount = await this.fetchFilteredCount(page);\n    // Only fetch total count if it's specific in options\n    if (this.loadTotalCount) {\n      this.totalCount = await this.fetchTotalCount(page);\n    }\n\n    // Pass results to grid\n    callback(page.items, this.filteredCount);\n\n    // Pass results to callback\n    if (this.afterLoadCallback) {\n      this.afterLoadCallback({\n        totalCount: this.totalCount,\n        filteredCount: this.filteredCount,\n      });\n    }\n  }\n\n  protected async fetchPage(params: GridDataProviderParams<TItem>): Promise<DataPage<TItem>> {\n    const sort = createSort(params);\n    const pageNumber = params.page;\n    const { pageSize } = params;\n    const pageRequest = {\n      pageNumber,\n      pageSize,\n      sort,\n    };\n    const items = await this.service.list(pageRequest, this.filter);\n\n    return { items, pageRequest };\n  }\n\n  protected abstract fetchTotalCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n\n  protected abstract fetchFilteredCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n}\n\nexport abstract class AbstractComboBoxDataProvider<TItem> {\n  protected readonly list: ComboBoxFetchMethod<TItem>;\n  protected readonly loadTotalCount?: boolean;\n\n  protected sort: Sort | undefined;\n  protected totalCount: number | undefined;\n  protected filteredCount: number | undefined;\n\n  constructor(list: ComboBoxFetchMethod<TItem>, sort: Sort | undefined) {\n    this.list = list;\n    this.sort = sort;\n  }\n\n  reset(): void {\n    this.totalCount = undefined;\n    this.filteredCount = undefined;\n  }\n\n  load(params: ComboBoxDataProviderParams, callback: ComboBoxDataProviderCallback<TItem>): void {\n    this.fetchPage(params)\n      .then(async (page) => {\n        this.filteredCount = await this.fetchFilteredCount(page);\n        // Only fetch total count if it's specific in options\n        if (this.loadTotalCount) {\n          this.totalCount = await this.fetchTotalCount(page);\n        }\n\n        // Pass results to the combobox\n        callback(page.items, this.filteredCount);\n      })\n      .catch((error: unknown) => {\n        throw error;\n      });\n  }\n\n  protected async fetchPage(params: ComboBoxDataProviderParams): Promise<DataPage<TItem>> {\n    const pageNumber = params.page;\n    const { pageSize } = params;\n    const pageRequest: Pageable = {\n      pageNumber,\n      pageSize,\n      sort: this.sort ?? { orders: [] },\n    };\n    const items = await this.list(pageRequest, params.filter);\n\n    return { items, pageRequest };\n  }\n\n  protected abstract fetchTotalCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n\n  protected abstract fetchFilteredCount(page: DataPage<TItem>): Promise<number | undefined> | number | undefined;\n}\n\nfunction determineInfiniteScrollingSize(page: DataPage<unknown>, lastKnownSize?: number): number {\n  const { items, pageRequest } = page;\n  const { pageNumber, pageSize } = pageRequest;\n  let infiniteScrollingSize;\n\n  if (items.length === pageSize) {\n    infiniteScrollingSize = (pageNumber + 1) * pageSize + 1;\n    if (lastKnownSize !== undefined && infiniteScrollingSize < lastKnownSize) {\n      // Only allow size to grow here to avoid shrinking the size when scrolled down and sorting\n      infiniteScrollingSize = lastKnownSize;\n    }\n  } else {\n    infiniteScrollingSize = pageNumber * pageSize + items.length;\n  }\n\n  return infiniteScrollingSize;\n}\n\nexport class InfiniteDataProvider<TItem> extends DataProvider<TItem> {\n  // cannot be static, otherwise it does not implement superclass\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected fetchTotalCount(): undefined {\n    return undefined;\n  }\n\n  protected fetchFilteredCount(page: DataPage<TItem>): number | undefined {\n    return determineInfiniteScrollingSize(page, this.filteredCount);\n  }\n}\nexport class InfiniteComboBoxDataProvider<TItem> extends AbstractComboBoxDataProvider<TItem> {\n  // cannot be static, otherwise it does not implement superclass\n  // eslint-disable-next-line @typescript-eslint/class-methods-use-this\n  protected fetchTotalCount(): undefined {\n    return undefined;\n  }\n\n  protected fetchFilteredCount(page: DataPage<TItem>): number | undefined {\n    return determineInfiniteScrollingSize(page, this.filteredCount);\n  }\n}\n\nexport class FixedSizeDataProvider<TItem> extends DataProvider<TItem> {\n  declare service: ListAndCountService<TItem>;\n\n  constructor(service: ListAndMaybeCountService<TItem>, options: DataProviderOptions = {}) {\n    if (!isCountService(service)) {\n      throw new Error('The provided service does not implement the CountService interface.');\n    }\n    super(service, options);\n  }\n\n  protected async fetchTotalCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.totalCount !== undefined) {\n      return this.totalCount;\n    }\n    return this.service.count(undefined);\n  }\n\n  protected async fetchFilteredCount(): Promise<number | undefined> {\n    // Use cached count if it's already known\n    if (this.filteredCount !== undefined) {\n      return this.filteredCount;\n    }\n    return this.service.count(this.filter);\n  }\n}\n\nexport function createDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  options: DataProviderOptions = {},\n): DataProvider<TItem> {\n  if (isCountService(service)) {\n    return new FixedSizeDataProvider(service, options);\n  }\n  return new InfiniteDataProvider(service, options);\n}\n\ntype UseDataProviderResult<TItem> = Readonly<{\n  dataProvider: GridDataProvider<TItem>;\n  refresh(): void;\n}>;\n\nexport function useDataProvider<TItem>(\n  service: ListAndMaybeCountService<TItem>,\n  filter?: FilterUnion,\n): UseDataProviderResult<TItem> {\n  const [refreshCounter, setRefreshCounter] = useState(0);\n  const dataProvider = useMemo(() => createDataProvider(service, { initialFilter: filter }), [service]);\n\n  // Update filter in data provider\n  dataProvider.setFilter(filter);\n\n  // Create a new data provider function reference when the filter changes or the refresh counter is incremented.\n  // This effectively forces the grid to reload\n  const dataProviderFn = useMemo(() => dataProvider.load.bind(dataProvider), [dataProvider, filter, refreshCounter]);\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    dataProvider: dataProviderFn,\n    refresh: () => {\n      dataProvider.reset();\n      setRefreshCounter(refreshCounter + 1);\n    },\n  };\n}\n\nexport type UseGridDataProviderResult<TItem> = GridDataProvider<TItem> & {\n  refresh(): void;\n};\n\nexport type GridFetchMethod<TItem> = (pageable: Pageable) => Promise<TItem[]>;\n\n/**\n * Creates a data provider for a grid component that fetches data using the provided fetch callback.\n *\n * @param fetch - the callback that fetches the data for the grid. The callback should return a promise that resolves to an array of items.\n * @param dependencies - A list of all reactive values referenced inside of the fetch callback. A change to any of the listed values will cause the grid to refresh its data.\n * @returns a data provider that can be assigned to a <Grid> component usings its dataProvider property and additionally contains a refresh method that can be called to force a reload of the grid data.\n */\nexport function useGridDataProvider<TItem>(\n  fetch: GridFetchMethod<TItem>,\n  dependencies?: DependencyList,\n): UseGridDataProviderResult<TItem> {\n  const result = useDataProvider(\n    useMemo(\n      () => ({\n        list: async (pageable: Pageable) => fetch(pageable),\n      }),\n      dependencies ?? [],\n    ),\n  );\n  const dataProvider: UseGridDataProviderResult<TItem> = result.dataProvider as UseGridDataProviderResult<TItem>;\n  dataProvider.refresh = result.refresh;\n  return dataProvider;\n}\n\nexport type UseComboBoxDataProviderResult<TItem> = ComboBoxDataProvider<TItem> & {\n  refresh(): void;\n};\n\nexport type ComboBoxFetchMethod<TItem> = (pageable: Pageable, filterString: string) => Promise<TItem[]>;\n\nfunction createComboBoxDataProvider<TItem>(\n  list: ComboBoxFetchMethod<TItem>,\n  sort: Sort | undefined,\n): AbstractComboBoxDataProvider<TItem> {\n  return new InfiniteComboBoxDataProvider(list, sort);\n}\n\ntype ComboboxDataProviderOptions = {\n  sort?: Sort;\n};\n\n/**\n * Creates a data provider for a combo box component that fetches data using the provided fetch callback.\n *\n * @param fetch - the method that fetches the data for the grid. The method should return a promise that resolves to an array of items.\n * @param dependencies - A list of all reactive values referenced inside of the fetch callback. A change to any of the listed values will cause the combo box to refresh its data.\n * @returns a data provider that can be assigned to a <ComboBox> component usings its dataProvider property and additionally contains a refresh method that can be called to force a reload of the combo box data.\n */\nexport function useComboBoxDataProvider<TItem>(\n  fetch: ComboBoxFetchMethod<TItem>,\n  options?: ComboboxDataProviderOptions,\n  dependencies?: DependencyList,\n): UseComboBoxDataProviderResult<TItem> {\n  const [refreshCounter, setRefreshCounter] = useState(0);\n\n  const dataProvider = useMemo(\n    () => createComboBoxDataProvider(fetch, options?.sort),\n    [options?.sort, ...(dependencies ?? [])],\n  );\n\n  // Create a new data provider function reference when the refresh counter is incremented.\n  // This effectively forces the combo box to reload\n  return useMemo(() => {\n    const dataProviderWithRefresh = (...args: Parameters<typeof dataProvider.load>) => dataProvider.load(...args);\n    dataProviderWithRefresh.refresh = () => {\n      dataProvider.reset();\n      setRefreshCounter(refreshCounter + 1);\n    };\n    return dataProviderWithRefresh;\n  }, [dataProvider, refreshCounter]);\n}\n", "enum Direction {\n    ASC = \"ASC\",\n    DESC = \"DESC\"\n}\nexport default Direction;\n", "enum NullHandling {\n    NATIVE = \"NATIVE\",\n    NULLS_FIRST = \"NULLS_FIRST\",\n    NULLS_LAST = \"NULLS_LAST\"\n}\nexport default NullHandling;\n", "import { GridSorter } from '@vaadin/react-components/GridSorter.js';\nimport { useContext, type ReactElement } from 'react';\nimport { ColumnContext } from './autogrid-column-context.js';\n\nexport function HeaderSorter(): ReactElement {\n  const context = useContext(ColumnContext)!;\n  const sorterState = context.sortState[context.propertyInfo.name];\n  const direction = sorterState?.direction ?? null;\n  const headerLabel = context.customColumnOptions?.header ?? context.propertyInfo.humanReadableName;\n\n  return context.customColumnOptions?.sortable === false ? (\n    <>{headerLabel}</>\n  ) : (\n    <GridSorter\n      path={context.propertyInfo.name}\n      direction={direction}\n      onDirectionChanged={(e) => {\n        context.setSortState((prevState) => {\n          const newSorterState = e.detail.value ? { direction: e.detail.value } : undefined;\n          return { ...prevState, [context.propertyInfo.name]: newSorterState };\n        });\n      }}\n    >\n      {headerLabel}\n    </GridSorter>\n  );\n}\n", "import {\n  BooleanModel,\n  NumberModel,\n  StringModel,\n  _meta,\n  createDetachedModel,\n  type AbstractModel,\n  type DetachedModelConstructor,\n  type ModelMetadata,\n  EnumModel,\n  ObjectModel,\n} from '@vaadin/hilla-lit-form';\n\nexport type PropertyType =\n  | 'boolean'\n  | 'date'\n  | 'datetime'\n  | 'decimal'\n  | 'enum'\n  | 'integer'\n  | 'object'\n  | 'string'\n  | 'time'\n  | undefined;\n\nconst javaTypeMap: Record<string, PropertyType> = {\n  byte: 'integer',\n  'java.lang.Byte': 'integer',\n  short: 'integer',\n  'java.lang.Short': 'integer',\n  int: 'integer',\n  'java.lang.Integer': 'integer',\n  long: 'integer',\n  'java.lang.Long': 'integer',\n  float: 'decimal',\n  'java.lang.Float': 'decimal',\n  double: 'decimal',\n  'java.lang.Double': 'decimal',\n  'java.time.LocalDate': 'date',\n  'java.time.LocalTime': 'time',\n  'java.time.OffsetTime': 'time',\n  'java.time.LocalDateTime': 'datetime',\n  'java.time.OffsetDateTime': 'datetime',\n  'java.time.ZonedDateTime': 'datetime',\n  'java.util.Date': 'datetime',\n  'java.sql.Date': 'datetime',\n};\n\nfunction determinePropertyType(model: AbstractModel): PropertyType {\n  // Try detecting by Java type\n  const { javaType } = model[_meta];\n  const propertyType = javaType ? javaTypeMap[javaType] : undefined;\n  if (propertyType) {\n    return propertyType;\n  }\n\n  // Otherwise detect by model instance\n  if (model instanceof StringModel) {\n    return 'string';\n  } else if (model instanceof NumberModel) {\n    return 'decimal';\n  } else if (model instanceof BooleanModel) {\n    return 'boolean';\n  } else if (model instanceof EnumModel) {\n    return 'enum';\n  } else if (model instanceof ObjectModel) {\n    return 'object';\n  }\n\n  return undefined;\n}\n\nexport interface PropertyInfo {\n  name: string;\n  humanReadableName: string;\n  type: PropertyType;\n  meta: ModelMetadata;\n  model: AbstractModel;\n}\n\nexport function hasAnnotation(meta: ModelMetadata, annotationName: string): boolean {\n  return meta.annotations?.some((annotation) => annotation.name === annotationName) ?? false;\n}\n\n// This is from vaadin-grid-column.js, should be used from there maybe. At least we must be 100% sure to match grid and fields\nexport function _generateHeader(path: string): string {\n  return path\n    .substring(path.lastIndexOf('.') + 1)\n    .replace(/([A-Z])/gu, '-$1')\n    .toLowerCase()\n    .replace(/-/gu, ' ')\n    .replace(/^./u, (match) => match.toUpperCase());\n}\n\nconst getPropertyNames = (model: DetachedModelConstructor<AbstractModel>): string[] => {\n  const propertyNames: string[] = [];\n\n  for (let proto = model; proto !== ObjectModel; proto = Object.getPrototypeOf(proto)) {\n    // parent properties are added at the beginning\n    propertyNames.unshift(...Object.keys(Object.getOwnPropertyDescriptors(proto.prototype)).filter((p) => p !== 'new'));\n  }\n\n  return propertyNames;\n};\n\nexport class ModelInfo {\n  private readonly modelInstance: AbstractModel;\n\n  readonly idProperty?: PropertyInfo;\n\n  constructor(model: DetachedModelConstructor<AbstractModel>, idPropertyName?: string) {\n    this.modelInstance = createDetachedModel(model);\n\n    // Try to find id property\n    this.idProperty = ModelInfo.resolveIdProperty(this, idPropertyName);\n  }\n\n  private static resolveIdProperty(modelInfo: ModelInfo, idPropertyName?: string): PropertyInfo | undefined {\n    // Return explicit property if defined\n    if (idPropertyName) {\n      return modelInfo.getProperty(idPropertyName);\n    }\n\n    // Otherwise check defaults\n    const rootProperties = modelInfo.getRootProperties();\n    // Check for @Id annotation\n    let idProperty = rootProperties.find((propertyInfo) => hasAnnotation(propertyInfo.meta, 'jakarta.persistence.Id'));\n    // Check for id name as fallback\n    if (!idProperty) {\n      idProperty = rootProperties.find((propertyInfo) => propertyInfo.name === 'id');\n    }\n\n    return idProperty;\n  }\n\n  private static resolvePropertyModel(modelInstance: AbstractModel, path: string): AbstractModel | undefined {\n    const parts = path.split('.');\n    let currentModel: AbstractModel | undefined = modelInstance;\n    for (const part of parts) {\n      if (!currentModel || !(currentModel instanceof ObjectModel)) {\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      currentModel = (currentModel as any)[part];\n    }\n    return currentModel;\n  }\n\n  getRootProperties(path?: string): PropertyInfo[] {\n    const model = path ? ModelInfo.resolvePropertyModel(this.modelInstance, path) : this.modelInstance;\n    if (!model) {\n      return [];\n    }\n    return getPropertyNames(model.constructor as any)\n      .map((name) => {\n        const effectivePath = path ? `${path}.${name}` : name;\n        return this.getProperty(effectivePath);\n      })\n      .filter(Boolean) as PropertyInfo[];\n  }\n\n  getProperty(path: string): PropertyInfo | undefined {\n    const propertyModel = ModelInfo.resolvePropertyModel(this.modelInstance, path);\n    if (!propertyModel?.[_meta]) {\n      return undefined;\n    }\n\n    const pathParts = path.split('.');\n    const name = pathParts[pathParts.length - 1];\n\n    const meta = propertyModel[_meta];\n    const humanReadableName = _generateHeader(name);\n    const type = determinePropertyType(propertyModel);\n\n    return {\n      name: path,\n      humanReadableName,\n      type,\n      meta,\n      model: propertyModel,\n    };\n  }\n\n  getProperties(paths: string[]): PropertyInfo[] {\n    return paths.map((path) => this.getProperty(path)).filter(Boolean) as PropertyInfo[];\n  }\n}\n\nexport function getDefaultProperties(modelInfo: ModelInfo): PropertyInfo[] {\n  // Start from root properties\n  const properties = modelInfo.getRootProperties();\n  return (\n    properties\n      // Auto-expand nested properties of one-to-one relations\n      .flatMap((prop) => {\n        if (hasAnnotation(prop.meta, 'jakarta.persistence.OneToOne')) {\n          return modelInfo.getRootProperties(prop.name);\n        }\n        return prop;\n      })\n      // Exclude properties that have an unknown type, or are annotated with id\n      // and version\n      .filter(\n        (prop) =>\n          !!prop.type &&\n          !(\n            hasAnnotation(prop.meta, 'jakarta.persistence.Id') ||\n            hasAnnotation(prop.meta, 'jakarta.persistence.Version')\n          ),\n      )\n  );\n}\n", "/* eslint-disable import/export */\nimport { AutoGrid as _AutoGrid } from './autogrid.js';\nimport { featureRegistration } from './util';\n\nexport * from './autogrid.js';\n\nexport const AutoGrid: typeof _AutoGrid = featureRegistration(_AutoGrid, 'AutoGrid');\n", "/* eslint-disable @typescript-eslint/unbound-method */\nimport {\n  _fromString,\n  _validity,\n  type AbstractModel,\n  type BinderConfiguration,\n  type BinderNode,\n  BinderRoot,\n  CHANGED,\n  type DetachedModelConstructor,\n  type FieldStrategy,\n  getBinderNode,\n  getDefaultFieldStrategy,\n  hasFromString,\n  isFieldElement,\n  type Validator,\n  type Value,\n  type ValueError,\n  type ArrayModel,\n  type ArrayItemModel,\n} from '@vaadin/hilla-lit-form';\nimport { useEffect, useMemo, useReducer, useRef } from 'react';\nimport type { Writable } from 'type-fest';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n((feature, vaadinObj = (window.Vaadin ??= {})) => {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `@vaadin/hilla-react-form/${feature}` : '@vaadin/hilla-react-form',\n    version: '24.7.2',\n  });\n})();\n\nlet isRendering = false;\n\nfunction useUpdate() {\n  const [_, count] = useReducer((x: number) => x + 1, 0);\n  return () => {\n    if (isRendering) {\n      return;\n    }\n    count();\n  };\n}\n\nexport type FieldDirectiveResult = Readonly<{\n  name: string;\n  onBlur(): void;\n  onChange(): void;\n  onInput(): void;\n  ref(element: HTMLElement | null): void;\n}>;\n\nexport type FieldDirective = (model: AbstractModel) => FieldDirectiveResult;\n\nexport type UseFormPartResult<M extends AbstractModel> = Readonly<{\n  defaultValue?: Value<M>;\n  dirty: boolean;\n  errors: readonly ValueError[];\n  invalid: boolean;\n  model: M;\n  name: string;\n  field: FieldDirective;\n  ownErrors: ReadonlyArray<ValueError<Value<M>>>;\n  required: boolean;\n  validators: ReadonlyArray<Validator<Value<M>>>;\n  value?: Value<M>;\n  visited: boolean;\n  addValidator(validator: Validator<Value<M>>): void;\n  setValidators(validators: ReadonlyArray<Validator<Value<M>>>): void;\n  setValue(value: Value<M> | undefined): void;\n  setVisited(visited: boolean): void;\n  validate(): Promise<readonly ValueError[]>;\n}>;\n\nexport type UseFormResult<M extends AbstractModel> = Omit<UseFormPartResult<M>, 'setValue' | 'value'> &\n  Readonly<{\n    value: Value<M>;\n    submitting: boolean;\n    setDefaultValue(value: Value<M>): void;\n    setValue(value: Value<M>): void;\n    submit(): Promise<Value<M> | undefined | void>;\n    reset(): void;\n    clear(): void;\n    read(value: Value<M> | null | undefined): void;\n    update(): void;\n  }>;\n\nexport type UseFormArrayPartResult<M extends ArrayModel> = Omit<UseFormPartResult<M>, 'field'> & {\n  items: ReadonlyArray<ArrayItemModel<M>>;\n};\n\ntype FieldState<T = unknown> = {\n  required: boolean;\n  invalid: boolean;\n  errorMessage: string;\n  strategy?: FieldStrategy<T>;\n  element?: HTMLElement;\n  inputHandler(): void;\n  changeHandler(): void;\n  blurHandler(): void;\n  ref(element: HTMLElement | null): void;\n};\n\nfunction convertFieldValue<T extends AbstractModel>(model: T, fieldValue: unknown) {\n  return typeof fieldValue === 'string' && hasFromString(model) ? model[_fromString](fieldValue) : fieldValue;\n}\n\nfunction getFormPart<M extends AbstractModel>(node: BinderNode<M>): Omit<UseFormPartResult<M>, 'field'> {\n  return {\n    addValidator: node.addValidator.bind(node),\n    get defaultValue() {\n      return node.defaultValue;\n    },\n    dirty: node.dirty,\n    errors: node.errors,\n    invalid: node.invalid,\n    model: node.model,\n    name: node.name,\n    ownErrors: node.ownErrors,\n    required: node.required,\n    setValidators(validators) {\n      node.validators = validators;\n    },\n    setValue(value) {\n      node.value = value;\n    },\n    setVisited(visited: boolean) {\n      node.visited = visited;\n    },\n    validate: node.validate.bind(node),\n    validators: node.validators,\n    get value() {\n      return node.value;\n    },\n    visited: node.visited,\n  };\n}\n\nfunction useFields<M extends AbstractModel>(node: BinderNode<M>): FieldDirective {\n  const update = useUpdate();\n\n  return useMemo(() => {\n    const registry = new WeakMap<AbstractModel, FieldState>();\n\n    return ((model: AbstractModel) => {\n      isRendering = true;\n      const n = getBinderNode(model);\n\n      let fieldState = registry.get(model);\n\n      if (!fieldState) {\n        fieldState = {\n          changeHandler() {\n            fieldState!.inputHandler();\n            n.validate().catch(() => {});\n          },\n          element: undefined,\n          errorMessage: '',\n          inputHandler() {\n            if (fieldState!.strategy) {\n              // Remove invalid flag, so that .checkValidity() in Vaadin Components\n              // does not interfere with errors from Hilla.\n              fieldState!.strategy.invalid = false;\n              // When bad input is detected, skip reading new value in binder state\n              fieldState!.strategy.checkValidity();\n              n[_validity] = fieldState!.strategy.validity;\n              n.value = convertFieldValue(model, fieldState!.strategy.value);\n            }\n          },\n          invalid: false,\n          blurHandler() {\n            fieldState!.inputHandler();\n            n.validate().catch(() => {});\n            n.visited = true;\n          },\n          ref(element: HTMLElement | null) {\n            if (!element) {\n              fieldState!.element?.removeEventListener('blur', fieldState!.blurHandler);\n              fieldState!.strategy?.removeEventListeners();\n              fieldState!.element = undefined;\n              fieldState!.strategy = undefined;\n              update();\n              return;\n            }\n\n            if (!isFieldElement(element)) {\n              throw new TypeError(`Element '${element.localName}' is not a form element`);\n            }\n\n            if (fieldState!.element !== element) {\n              fieldState!.element = element;\n              fieldState!.element.addEventListener('blur', fieldState!.blurHandler);\n              fieldState!.strategy = getDefaultFieldStrategy(element, model);\n              fieldState!.strategy.onInput = fieldState!.inputHandler;\n              fieldState!.strategy.onChange = fieldState!.changeHandler;\n              update();\n            }\n          },\n          required: false,\n          strategy: undefined,\n        };\n\n        registry.set(model, fieldState);\n      }\n\n      if (fieldState.strategy) {\n        const valueFromField = convertFieldValue(model, fieldState.strategy.value);\n        if (valueFromField !== n.value && !(Number.isNaN(n.value) && Number.isNaN(valueFromField))) {\n          fieldState.strategy.value = Number.isNaN(n.value) ? '' : n.value;\n        }\n\n        if (fieldState.required !== n.required) {\n          fieldState.required = n.required;\n          fieldState.strategy.required = n.required;\n        }\n\n        const firstError = n.ownErrors.at(0);\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        const errorMessage = firstError?.message ?? '';\n        if (fieldState.errorMessage !== errorMessage) {\n          fieldState.errorMessage = errorMessage;\n          fieldState.strategy.errorMessage = errorMessage;\n        }\n\n        // Make sure invalid state is always in sync\n        fieldState.invalid = n.invalid;\n        fieldState.strategy.invalid = n.invalid;\n      }\n\n      isRendering = false;\n      return {\n        name: n.name,\n        ref: fieldState.ref,\n      };\n    }) as FieldDirective;\n  }, [node]);\n}\n\nexport function useForm<M extends AbstractModel>(\n  Model: DetachedModelConstructor<M>,\n  config?: BinderConfiguration<Value<M>>,\n): UseFormResult<M> {\n  const configRef = useRef<Writable<BinderConfiguration<Value<M>>>>({});\n  configRef.current.onSubmit = config?.onSubmit;\n  configRef.current.onChange = config?.onChange;\n  const update = useUpdate();\n  const binder = useMemo(() => new BinderRoot(Model, configRef.current), [Model]);\n  const field = useFields(binder);\n  const clear = binder.clear.bind(binder);\n\n  useEffect(() => {\n    binder.addEventListener(CHANGED.type, update);\n    clear(); // this allows to initialize the validation strategies (issue 2282)\n    return () => binder.removeEventListener(CHANGED.type, update);\n  }, [binder]);\n\n  return {\n    ...getFormPart<M>(binder),\n    clear,\n    field,\n    read: binder.read.bind(binder),\n    reset: binder.reset.bind(binder),\n    setDefaultValue(defaultValue) {\n      binder.defaultValue = defaultValue;\n    },\n    setValue(value) {\n      binder.value = value;\n    },\n    submit: binder.submit.bind(binder),\n    value: binder.value,\n    submitting: binder.submitting,\n    update,\n  };\n}\n\nexport function useFormPart<M extends AbstractModel>(model: M): UseFormPartResult<M> {\n  isRendering = true;\n  const binderNode = getBinderNode(model);\n  const field = useFields(binderNode);\n  isRendering = false;\n\n  return {\n    ...getFormPart(binderNode),\n    field,\n  };\n}\n\n/**\n * Hook to access an array model part of a form. It provides the same API as `useFormPart`,\n * but adds an `items` property that allows to iterate over the items in form of an array of models.\n *\n * @param model - The array model to access\n * @returns The array model part of the form\n */\nexport function useFormArrayPart<M extends ArrayModel>(model: M): UseFormArrayPartResult<M> {\n  isRendering = true;\n  const binderNode = getBinderNode(model);\n  isRendering = false;\n  return {\n    ...getFormPart(binderNode),\n    items: Array.from(model, (item) => item.model as ArrayItemModel<M>),\n  };\n}\n", "import { EndpointError } from '@vaadin/hilla-frontend';\nimport { type AbstractModel, type DetachedModelConstructor, ValidationError, type Value } from '@vaadin/hilla-lit-form';\nimport { useForm, type UseFormResult } from '@vaadin/hilla-react-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { ConfirmDialog } from '@vaadin/react-components/ConfirmDialog';\nimport { FormLayout } from '@vaadin/react-components/FormLayout';\nimport { VerticalLayout } from '@vaadin/react-components/VerticalLayout.js';\nimport {\n  type ComponentType,\n  type JSX,\n  type KeyboardEvent,\n  type ReactElement,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { AutoFormField, type AutoFormFieldProps, type FieldOptions } from './autoform-field.js';\nimport css from './autoform.obj.js';\nimport type { FormService } from './crud.js';\nimport { getDefaultProperties, ModelInfo, type PropertyInfo } from './model-info.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport const emptyItem = Symbol();\n\n/**\n * An event that is fired when an error occurs while submitting the form.\n */\nexport type SubmitErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully submitted.\n */\nexport type SubmitEvent<TItem> = {\n  /**\n   * The item that was submitted, as returned by the service.\n   */\n  item: TItem;\n};\n\n/**\n * An event that is fired when an error occurs while deleting an item.\n */\nexport type DeleteErrorEvent = {\n  /**\n   * The error that occurred.\n   */\n  error: EndpointError;\n  /**\n   * A function that can be used to set a custom error message. This will be\n   * shown in the form at the same position as the default error message.\n   * You are not required to call this function if you want to handle the\n   * error differently.\n   */\n  setMessage(message: string): void;\n};\n\n/**\n * An event that is fired when the form has been successfully deleted.\n */\nexport type DeleteEvent<TItem> = {\n  /**\n   * The item that was deleted, as returned by the service.\n   */\n  item: TItem;\n};\n\nexport type AutoFormLayoutRendererProps<M extends AbstractModel> = Readonly<{\n  form: UseFormResult<M>;\n  children: ReadonlyArray<ReactElement<AutoFormFieldProps>>;\n}>;\n\nexport type AutoFormProps<M extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for saving and deleting items. This must be a\n     * TypeScript service that has been generated by Hilla from a backend Java\n     * service that implements the `com.vaadin.hilla.crud.FormService` interface.\n     */\n    service: FormService<Value<M>>;\n    /**\n     * The entity model to use, which determines which fields to show in the\n     * form. This must be a Typescript model class that has been generated by\n     * Hilla from a backend Java class. The model must match with the type of\n     * the items handled by the service. For example, a `PersonModel` can be\n     * used with a service that handles `Person` instances.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `visibleFields` option to customize\n     * which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<M>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `FormService.delete` method. The delete button\n     * will not be shown if no item ID can be found.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * The item to edit in the form. The form fields are automatically populated\n     * with values from the item's properties. In order to create a new item,\n     * either pass `null`, or leave this prop as undefined.\n     *\n     * Use the `onSubmitSuccess` callback to get notified when the item has been\n     * saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    item?: Value<M> | typeof emptyItem | null;\n    /**\n     * Whether the form should be disabled. This disables all form fields and\n     * all buttons.\n     */\n    disabled?: boolean;\n    /**\n     * Allows to customize the layout of the form by providing a custom\n     * renderer. The renderer receives the form instance and the pre-rendered\n     * fields as props. The renderer can either reuse the pre-rendered fields in\n     * the custom layout, or render custom fields and connect them to the form\n     * manually.\n     *\n     * Check the component documentation for details and examples.\n     *\n     * Example using pre-rendered fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ children }) =>\n     *   <VerticalLayout>\n     *     {children}\n     *     <p>All data is collected anonymously.</p>\n     *   </VerticalLayout>\n     * } />\n     * ```\n     *\n     * Example rendering custom fields:\n     * ```tsx\n     * <AutoForm layoutRenderer={({ form }) =>\n     *   <VerticalLayout>\n     *     <TextField {...form.field(form.model.name)} />\n     *     ...\n     *   </VerticalLayout>\n     * } />\n     * ```\n     */\n    layoutRenderer?: ComponentType<AutoFormLayoutRendererProps<M>>;\n    /**\n     * Defines the fields to show in the form, and in which order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be shown in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    visibleFields?: string[];\n    /**\n     * Defines the fields to hide in the form, keeping the default order. This takes\n     * an array of property names. Properties that are not included in this\n     * array will not be hidden in the form, and properties that are included,\n     * but don't exist in the model, will be ignored.\n     */\n    hiddenFields?: string[];\n    /**\n     * Allows to customize the FormLayout used by default. This is especially useful\n     * to define the `responsiveSteps`. See the\n     * {@link https://hilla.dev/docs/react/components/form-layout | FormLayout documentation}\n     * for details.\n     */\n    formLayoutProps?: ComponentStyleProps & Pick<Parameters<typeof FormLayout>[0], 'responsiveSteps'>;\n    /**\n     * Allows to customize individual fields of the form. This takes an object\n     * where the keys are property names, and the values are options for the\n     * respective field for editing that property.\n     */\n    fieldOptions?: Record<string, FieldOptions>;\n    /**\n     * Whether to show the delete button in the form. This is disabled by\n     * default. If enabled, the delete button will only be shown when editing\n     * an existing item, which means that `item` is not null. The delete button\n     * will also only be shown if an item has a discernible ID. See the\n     * `itemIdProperty` prop for details how the item ID is detected.\n     *\n     * Use the `onDeleteSuccess` callback to get notified when the item has been\n     * deleted.\n     *\n     * NOTE: This only hides the button, it does not prevent from calling the\n     * delete method on the service. To completely disable deleting, you must\n     * override the `delete` method in the backend Java service to either throw\n     * an exception or annotate it with `@DenyAll` to prevent access.\n     */\n    deleteButtonVisible?: boolean;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * submitting the form.\n     *\n     * Note that this will not be called for validation errors, which are\n     * handled automatically.\n     */\n    onSubmitError?({ error }: SubmitErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * submitted and the item has been saved.\n     *\n     * When submitting a new item (i.e. when `item` is null or undefined), the\n     * form will be automatically cleared, allowing to submit another new item.\n     * In order to keep editing the same item after submitting, set the `item`\n     * prop to the new item.\n     */\n    onSubmitSuccess?({ item }: SubmitEvent<Value<M>>): void;\n    /**\n     * A callback that will be called if an unexpected error occurs while\n     * deleting an item.\n     */\n    onDeleteError?({ error }: DeleteErrorEvent): void;\n    /**\n     * A callback that will be called after the form has been successfully\n     * deleted.\n     */\n    onDeleteSuccess?({ item }: DeleteEvent<Value<M>>): void;\n  }>;\n\n/**\n * Auto Form is a component that automatically generates a form for editing,\n * updating and deleting items from a backend service.\n *\n * Example usage:\n * ```tsx\n * import { AutoForm } from '@vaadin/hilla-react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoForm\n *   service={PersonService}\n *   model={PersonModel}\n *   onSubmitSuccess={({ item }) => {\n *     console.log('Submitted item:', item);\n *   }}\n * />\n * ```\n */\nexport function AutoForm<M extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  item = emptyItem,\n  onSubmitError,\n  onSubmitSuccess,\n  disabled,\n  layoutRenderer: LayoutRenderer,\n  visibleFields,\n  hiddenFields,\n  formLayoutProps,\n  fieldOptions,\n  style,\n  id,\n  className,\n  deleteButtonVisible,\n  onDeleteSuccess,\n  onDeleteError,\n}: AutoFormProps<M>): JSX.Element {\n  const form = useForm(model, {\n    onSubmit: async (formItem) => service.save(formItem),\n  });\n  const formErrorRef = useRef<HTMLDivElement>(null);\n  const [formError, setFormError] = useState<JSX.Element | string>('');\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const modelInfo = useMemo(() => new ModelInfo(model, itemIdProperty), [model]);\n\n  const isEditMode = item !== undefined && item !== null && item !== emptyItem;\n  const showDeleteButton = deleteButtonVisible && isEditMode && modelInfo.idProperty;\n  const isSubmitDisabled = !!disabled || (isEditMode && !form.dirty);\n\n  useEffect(() => {\n    if (item !== emptyItem) {\n      form.read(item);\n    } else {\n      form.clear();\n    }\n  }, [item]);\n\n  useEffect(() => {\n    formErrorRef.current?.scrollIntoView({ behavior: 'smooth', block: 'end' });\n  }, [formError]);\n\n  function handleSubmitError(error: unknown) {\n    if (error instanceof ValidationError) {\n      const nonPropertyErrorMessages = error.errors\n        .filter((validationError) => !validationError.property || typeof validationError.property === 'string')\n        .map((validationError) => {\n          const property =\n            validationError.property && typeof validationError.property === 'string'\n              ? `${validationError.property}: `\n              : '';\n          return `${property}${validationError.validatorMessage ?? validationError.message}`;\n        });\n      if (nonPropertyErrorMessages.length > 0) {\n        setFormError(\n          <div ref={formErrorRef}>\n            Validation errors:\n            <ul>\n              {nonPropertyErrorMessages.map((message, index) => (\n                <li key={index}>{message}</li>\n              ))}\n            </ul>\n          </div>,\n        );\n      }\n    } else if (error instanceof EndpointError) {\n      if (onSubmitError) {\n        onSubmitError({ error, setMessage: setFormError });\n      } else {\n        setFormError(error.message);\n      }\n    } else {\n      throw error;\n    }\n  }\n\n  async function handleSubmit(): Promise<void> {\n    try {\n      setFormError('');\n      const newItem = await form.submit();\n      if (newItem === undefined) {\n        // If update returns an empty object, then no update was performed\n        throw new EndpointError('No update performed');\n      } else if (onSubmitSuccess) {\n        onSubmitSuccess({ item: newItem });\n      }\n      // Automatically clear the form after submitting a new item.\n      // Otherwise, there would be no way for the developer to clear it, as the\n      // there is no new value to set for the item prop to trigger the above\n      // effect in case the prop is already null, undefined or the empty item.\n      if (!item || item === emptyItem) {\n        form.clear();\n      }\n    } catch (error) {\n      handleSubmitError(error);\n    }\n  }\n\n  function deleteItem() {\n    setShowDeleteDialog(true);\n  }\n\n  async function confirmDelete() {\n    // At this point, item can not be null or emptyItem\n    const deletedItem = item as Value<M>;\n    try {\n      const idProperty = modelInfo.idProperty!;\n      // eslint-disable-next-line\n      const id = (item as any)[idProperty.name];\n      await service.delete(id);\n      if (onDeleteSuccess) {\n        onDeleteSuccess({ item: deletedItem });\n      }\n    } catch (error) {\n      if (error instanceof EndpointError) {\n        if (onDeleteError) {\n          onDeleteError({ error, setMessage: setFormError });\n        } else {\n          setFormError(error.message);\n        }\n      } else {\n        throw error;\n      }\n    } finally {\n      setShowDeleteDialog(false);\n    }\n  }\n\n  function cancelDelete() {\n    setShowDeleteDialog(false);\n  }\n\n  const handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.target instanceof HTMLTextAreaElement) {\n      return;\n    }\n    if (event.key === 'Enter' && !isSubmitDisabled) {\n      // eslint-disable-next-line no-void\n      void handleSubmit();\n    }\n  };\n\n  function createAutoFormField(propertyInfo: PropertyInfo): JSX.Element {\n    const fieldOptionsForProperty = fieldOptions?.[propertyInfo.name] ?? {};\n\n    return (\n      <AutoFormField\n        key={propertyInfo.name}\n        propertyInfo={propertyInfo}\n        form={form}\n        disabled={disabled}\n        options={fieldOptionsForProperty}\n      />\n    );\n  }\n\n  let visibleProperties = visibleFields ? modelInfo.getProperties(visibleFields) : getDefaultProperties(modelInfo);\n\n  // When using `hiddenFields`, remove fields to hide using their `name`\n  if (hiddenFields) {\n    visibleProperties = visibleProperties.filter(({ name }) => !hiddenFields.includes(name));\n  }\n\n  const fields = visibleProperties.map(createAutoFormField);\n\n  const layout = LayoutRenderer ? (\n    <LayoutRenderer form={form}>{fields}</LayoutRenderer>\n  ) : (\n    <FormLayout {...formLayoutProps}>{fields}</FormLayout>\n  );\n\n  return (\n    <div className={`auto-form ${className ?? ''}`} id={id} style={style} data-testid=\"auto-form\">\n      <VerticalLayout className=\"auto-form-fields\" onKeyDown={handleKeyDown}>\n        {layout}\n        {formError ? <div style={{ color: 'var(--lumo-error-color)' }}>{formError}</div> : <></>}\n      </VerticalLayout>\n      <div className=\"auto-form-toolbar\">\n        <Button\n          theme=\"primary\"\n          disabled={isSubmitDisabled}\n          // eslint-disable-next-line @typescript-eslint/no-misused-promises\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n        {form.dirty ? (\n          <Button theme=\"tertiary\" onClick={() => form.reset()}>\n            Discard\n          </Button>\n        ) : null}\n        {showDeleteButton && (\n          <Button className=\"auto-form-delete-button\" theme=\"tertiary error\" onClick={deleteItem}>\n            Delete...\n          </Button>\n        )}\n      </div>\n      {showDeleteDialog && (\n        <ConfirmDialog\n          opened\n          header=\"Delete item\"\n          confirmTheme=\"error\"\n          cancelButtonVisible\n          // eslint-disable-next-line\n          onConfirm={confirmDelete}\n          onCancel={cancelDelete}\n        >\n          Are you sure you want to delete the selected item?\n        </ConfirmDialog>\n      )}\n    </div>\n  );\n}\n", "import { _enum, type AbstractModel, type EnumModel, type Validator } from '@vaadin/hilla-lit-form';\nimport type { FieldDirectiveResult, UseFormResult } from '@vaadin/hilla-react-form';\nimport { useFormPart } from '@vaadin/hilla-react-form';\nimport { Checkbox } from '@vaadin/react-components/Checkbox.js';\nimport { DatePicker } from '@vaadin/react-components/DatePicker.js';\nimport { DateTimePicker } from '@vaadin/react-components/DateTimePicker.js';\nimport { IntegerField } from '@vaadin/react-components/IntegerField.js';\nimport { NumberField } from '@vaadin/react-components/NumberField.js';\nimport { Select } from '@vaadin/react-components/Select.js';\nimport { TextArea } from '@vaadin/react-components/TextArea.js';\nimport { TextField } from '@vaadin/react-components/TextField.js';\nimport { TimePicker } from '@vaadin/react-components/TimePicker.js';\nimport {\n  cloneElement,\n  type ComponentType,\n  createElement,\n  type CSSProperties,\n  type JSX,\n  useEffect,\n  useMemo,\n} from 'react';\nimport { useDatePickerI18n, useDateTimePickerI18n } from './locale.js';\nimport type { PropertyInfo } from './model-info.js';\nimport { convertToTitleCase } from './util.js';\n\nexport type AutoFormFieldProps = Readonly<{\n  propertyInfo: PropertyInfo;\n  form: UseFormResult<any>;\n  options: FieldOptions;\n  disabled?: boolean;\n}>;\n\ntype CustomFormFieldProps = FieldDirectiveResult & Readonly<{ label?: string; disabled?: boolean }>;\n\nexport type FieldOptions = Readonly<{\n  /**\n   * The id to apply to the field.\n   */\n  id?: string;\n  /**\n   * The class names to add to the field.\n   */\n  className?: string;\n  /**\n   * The style to apply to the field.\n   */\n  style?: CSSProperties;\n  /**\n   * The label to show for the field. If not specified, a human-readable label\n   * is generated from the property name.\n   */\n  label?: string;\n  /**\n   * The placeholder to when the field is empty.\n   *\n   * Note that some field types, such as checkbox, do not support a placeholder.\n   */\n  placeholder?: string;\n  /**\n   * The helper text to display below the field.\n   *\n   * Note that some field types, such as checkbox, do not support a helper text.\n   */\n  helperText?: string;\n  /**\n   * The number of columns to span. This value is passed to the underlying\n   * FormLayout, unless a custom layout is used. In that case, the value is\n   * ignored.\n   */\n  colspan?: number;\n  /**\n   * Whether the field should be disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the field should be readonly.\n   */\n  readonly?: boolean;\n  /**\n   * The element to render for the field. This allows customizing field props\n   * that are not supported by the field options, or to render a different field\n   * component. Other field options are automatically applied to the element,\n   * and the element is automatically bound to the form. If not specified, a\n   * default field element is rendered based on the property type.\n   *\n   * The element must be a field component, such as TextField, TextArea,\n   * NumberField, etc., otherwise form binding will not work. For more\n   * sophisticated customizations, use the `renderer` option.\n   *\n   * If the field options also specify a renderer function, then the element is\n   * ignored.\n   *\n   * Example enabling the clear button for a text field:\n   * ```tsx\n   * {\n   *   element: <TextField clearButtonVisible />\n   * }\n   * ```\n   *\n   * Example rendering a text area instead of a text field:\n   * ```tsx\n   * {\n   *   element: <TextArea />\n   * }\n   * ```\n   */\n  element?: JSX.Element;\n  /**\n   * Allows to specify a custom renderer for the field, for example to render a\n   * custom type of field or apply an additional layout around the field. The\n   * renderer receives field props that must be applied to the custom field\n   * component in order to connect it to the form.\n   *\n   * In order to customize one of the default fields, or render a different type\n   * of field, consider using the `element` option instead.\n   *\n   * Example:\n   * ```tsx\n   * {\n   *   renderer: ({ field }) => (\n   *     <div>\n   *       <TextArea {...field} />\n   *       <p>Number of words: {calculateNumberOfWords()}</p>\n   *     </div>\n   *   )\n   * }\n   * ```\n   */\n  renderer?(props: { field: CustomFormFieldProps }): JSX.Element;\n  /**\n   * Validators to apply to the field. The validators are added to the form\n   * when the field is rendered.\n   * UseMemo is recommended for the validators, so that they are not recreated\n   * on every render.\n   */\n  validators?: Validator[];\n}>;\n\ntype CommonFieldProps = Pick<\n  FieldOptions,\n  'className' | 'colspan' | 'disabled' | 'helperText' | 'id' | 'label' | 'placeholder' | 'readonly' | 'style'\n>;\n\ntype FieldRendererProps = Readonly<{\n  model: AbstractModel;\n  field: FieldDirectiveResult;\n  element?: JSX.Element;\n  fieldProps: CommonFieldProps;\n}>;\n\nfunction getPropertyModel(form: UseFormResult<any>, propertyInfo: PropertyInfo) {\n  const pathParts = propertyInfo.name.split('.');\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return pathParts.reduce<any>((model, property) => (model ? model[property] : undefined), form.model);\n}\n\nfunction renderFieldElement(\n  defaultComponentType: ComponentType,\n  { element, field, fieldProps }: FieldRendererProps,\n  additionalProps: any = {},\n) {\n  const fieldElement = element ?? createElement(defaultComponentType);\n  return cloneElement(fieldElement, { ...fieldProps, ...additionalProps, ...fieldElement.props, ...field });\n}\n\nfunction AutoFormTextField(props: FieldRendererProps) {\n  return renderFieldElement(TextField, props);\n}\n\nfunction AutoFormIntegerField(props: FieldRendererProps) {\n  return renderFieldElement(IntegerField, props);\n}\n\nfunction AutoFormDecimalField(props: FieldRendererProps) {\n  return renderFieldElement(NumberField, props);\n}\n\nfunction AutoFormDateField(props: FieldRendererProps) {\n  const i18n = useDatePickerI18n();\n  return renderFieldElement(DatePicker, props, { i18n });\n}\n\nfunction AutoFormTimeField(props: FieldRendererProps) {\n  return renderFieldElement(TimePicker, props);\n}\n\nfunction AutoFormDateTimeField(props: FieldRendererProps) {\n  const i18n = useDateTimePickerI18n();\n  return renderFieldElement(DateTimePicker, props, { i18n });\n}\n\nfunction AutoFormEnumField(props: FieldRendererProps) {\n  const enumModel = props.model as EnumModel;\n  const items = Object.keys(enumModel[_enum]).map((value) => ({\n    label: convertToTitleCase(value),\n    value,\n  }));\n  return renderFieldElement(Select, props, { items });\n}\n\nfunction AutoFormBooleanField(props: FieldRendererProps) {\n  return renderFieldElement(Checkbox, props);\n}\n\nfunction AutoFormObjectField({ model, fieldProps }: FieldRendererProps) {\n  const part = useFormPart(model);\n  const jsonString = part.value ? JSON.stringify(part.value) : '';\n  return <TextArea {...fieldProps} value={jsonString} readonly />;\n}\n\nexport function AutoFormField(props: AutoFormFieldProps): JSX.Element | null {\n  const { form, propertyInfo, options } = props;\n  const label = options.label ?? propertyInfo.humanReadableName;\n  const model = getPropertyModel(form, propertyInfo);\n  const field = form.field(model);\n\n  const formPart = useFormPart(model);\n  const defaultValidators = useMemo(() => formPart.validators, []);\n  const { validators } = options;\n  useEffect(() => {\n    formPart.setValidators([...defaultValidators, ...(validators ?? [])]);\n  }, [validators]);\n\n  if (options.renderer) {\n    const customFieldProps = { ...field, disabled: props.disabled, label };\n    return options.renderer({ field: customFieldProps });\n  }\n\n  const fieldProps: CommonFieldProps = {\n    id: options.id,\n    className: options.className,\n    style: options.style,\n    label,\n    placeholder: options.placeholder,\n    helperText: options.helperText,\n    colspan: options.colspan,\n    disabled: options.disabled ?? props.disabled,\n    readonly: options.readonly,\n  };\n\n  const rendererProps: FieldRendererProps = { model, field, element: options.element, fieldProps };\n\n  switch (props.propertyInfo.type) {\n    case 'string':\n      return <AutoFormTextField {...rendererProps}></AutoFormTextField>;\n    case 'integer':\n      return <AutoFormIntegerField {...rendererProps}></AutoFormIntegerField>;\n    case 'decimal':\n      return <AutoFormDecimalField {...rendererProps}></AutoFormDecimalField>;\n    case 'date':\n      return <AutoFormDateField {...rendererProps}></AutoFormDateField>;\n    case 'time':\n      return <AutoFormTimeField {...rendererProps}></AutoFormTimeField>;\n    case 'datetime':\n      return <AutoFormDateTimeField {...rendererProps}></AutoFormDateTimeField>;\n    case 'enum':\n      return <AutoFormEnumField {...rendererProps}></AutoFormEnumField>;\n    case 'boolean':\n      return <AutoFormBooleanField {...rendererProps}></AutoFormBooleanField>;\n    case 'object':\n      return <AutoFormObjectField {...rendererProps}></AutoFormObjectField>;\n    default:\n      return null;\n  }\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-form{display:flex;flex-direction:column;gap:var(--lumo-space-m)}.auto-form-toolbar{align-items:center;display:flex;flex-direction:row-reverse;gap:var(--lumo-space-xs) var(--lumo-space-s);justify-content:flex-start}.auto-form-delete-button{margin-right:auto}`);export default css;", "/* eslint-disable import/export */\nimport { AutoForm as _AutoForm } from './autoform.js';\nimport { featureRegistration } from './util';\n\nexport * from './autoform.js';\n\nexport const AutoForm: typeof _AutoForm = featureRegistration(_AutoForm, 'AutoForm');\n", "import type { AbstractModel, DetachedModelConstructor, Value } from '@vaadin/hilla-lit-form';\nimport { Button } from '@vaadin/react-components/Button.js';\nimport { SplitLayout } from '@vaadin/react-components/SplitLayout.js';\nimport { type JSX, useId, useRef, useState } from 'react';\nimport { AutoCrudDialog } from './autocrud-dialog.js';\nimport css from './autocrud.obj.js';\nimport { type AutoFormProps, emptyItem, AutoForm } from './autoform.js';\nimport { type AutoGridProps, AutoGrid, type AutoGridRef } from './autogrid.js';\nimport type { CrudService } from './crud.js';\nimport { useMediaQuery } from './media-query.js';\nimport { type ComponentStyleProps, registerStylesheet } from './util.js';\n\nregisterStylesheet(css);\n\nexport type AutoCrudFormHeaderRenderer<TItem> = (\n  editedItem: TItem | null,\n  disabled: boolean,\n) => JSX.Element | null | undefined;\n\nexport type AutoCrudFormProps<TModel extends AbstractModel> = Omit<\n  Partial<AutoFormProps<TModel>>,\n  'disabled' | 'item' | 'model' | 'onDeleteSuccess' | 'onSubmitSuccess' | 'service'\n> &\n  Readonly<{\n    /**\n     * A custom renderer function to create the header for the form. The\n     * function receives the edited item as the first parameter, and a boolean\n     * indicating whether the form is disabled as the second parameter. The\n     * edited item is `null` when creating a new item.\n     *\n     * By default, the header shows \"New item\" when creating a new item, and\n     * \"Edit item\" when editing an existing item.\n     */\n    headerRenderer?: AutoCrudFormHeaderRenderer<Value<TModel>>;\n  }>;\n\nexport type AutoCrudGridProps<TItem> = Omit<\n  Partial<AutoGridProps<TItem>>,\n  'model' | 'onActiveItemChanged' | 'selectedItems' | 'service'\n>;\n\nexport type AutoCrudProps<TModel extends AbstractModel = AbstractModel> = ComponentStyleProps &\n  Readonly<{\n    /**\n     * The service to use for fetching the data, as well saving and deleting\n     * items. This must be a TypeScript service that has been generated by Hilla\n     * from a backend Java service that implements the\n     * `com.vaadin.hilla.crud.CrudService` interface.\n     */\n    service: CrudService<Value<TModel>>;\n    /**\n     * The entity model to use for the CRUD. This determines which columns to\n     * show in the grid, and which fields to show in the form. This must be a\n     * Typescript model class that has been generated by Hilla from a backend\n     * Java class. The model must match with the type of the items returned by\n     * the service. For example, a `PersonModel` can be used with a service that\n     * returns `Person` instances.\n     *\n     * By default, the grid shows columns for all properties of the model which\n     * have a type that is supported. Use the `gridProps.visibleColumns` option\n     * to customize which columns to show and in which order.\n     *\n     * By default, the form shows fields for all properties of the model which\n     * have a type that is supported. Use the `formProps.visibleFields`\n     * option to customize which fields to show and in which order.\n     */\n    model: DetachedModelConstructor<TModel>;\n    /**\n     * The property to use to detect an item's ID. The item ID is required for\n     * deleting items via the `CrudService.delete` method as well as keeping the\n     * selection state after reloading the grid.\n     *\n     * By default, the component uses the property annotated with\n     * `jakarta.persistence.Id`, or a property named `id`, in that order.\n     * This option can be used to override the default behavior, or define the ID\n     * property in case a class doesn't have a property matching the defaults.\n     */\n    itemIdProperty?: string;\n    /**\n     * Determines whether to hide the \"New\" button in the toolbar.\n     *\n     * NOTE: This setting only hides the button; it does not prevent new items\n     * from being sent to the service. Ensure your backend Java service is\n     * properly secured to prevent unauthorized creation of new items.\n     *\n     * @defaultValue `false` meaning the button will be shown.\n     */\n    noNewButton?: boolean;\n    /**\n     * Props to pass to the form. See the `AutoForm` component for details.\n     */\n    formProps?: AutoCrudFormProps<TModel>;\n    /**\n     * Props to pass to the grid. See the `AutoGrid` component for details.\n     */\n    gridProps?: AutoCrudGridProps<Value<TModel>>;\n  }>;\n\nfunction defaultFormHeaderRenderer<TItem>(editedItem: TItem | null, disabled: boolean): JSX.Element | null | undefined {\n  const style = { color: disabled ? 'var(--lumo-disabled-text-color)' : 'var(--lumo-text-color)' };\n  return editedItem ? <h3 style={style}>Edit item</h3> : <h3 style={style}>New item</h3>;\n}\n\n/**\n * Auto CRUD is a component that provides CRUD (create, read, update, delete)\n * functionality based on a Java backend service. It automatically generates a\n * grid that shows data from the service, and a form for creating, updating and\n * deleting items.\n *\n * Example usage:\n * ```tsx\n * import { AutoCrud } from '@hilla/react-crud';\n * import PersonService from 'Frontend/generated/endpoints';\n * import PersonModel from 'Frontend/generated/com/example/application/Person';\n *\n * <AutoCrud service={PersonService} model={PersonModel} />\n * ```\n */\nexport function AutoCrud<TModel extends AbstractModel>({\n  service,\n  model,\n  itemIdProperty,\n  noNewButton,\n  formProps,\n  gridProps,\n  style,\n  id,\n  className,\n}: AutoCrudProps<TModel>): JSX.Element {\n  const [item, setItem] = useState<Value<TModel> | typeof emptyItem | undefined>(undefined);\n  const fullScreen = useMediaQuery('(max-width: 600px), (max-height: 600px)');\n  const autoGridRef = useRef<AutoGridRef>(null);\n  const { headerRenderer: customFormHeaderRenderer, ...autoFormProps } = formProps ?? {};\n  const formHeaderRenderer: AutoCrudFormHeaderRenderer<Value<TModel>> =\n    customFormHeaderRenderer ?? defaultFormHeaderRenderer;\n\n  const autoCrudId = useId();\n\n  function refreshGrid() {\n    autoGridRef.current?.refresh();\n  }\n\n  function handleCancel() {\n    setItem(undefined);\n  }\n\n  const formHeader = item && item !== emptyItem ? formHeaderRenderer(item, !item) : formHeaderRenderer(null, !item);\n\n  const mainSection = (\n    <div className=\"auto-crud-main\">\n      <AutoGrid\n        {...gridProps}\n        service={service}\n        model={model as DetachedModelConstructor<AbstractModel<Value<TModel>>>}\n        itemIdProperty={itemIdProperty}\n        selectedItems={item && item !== emptyItem ? [item] : []}\n        onActiveItemChanged={(e) => {\n          const activeItem = e.detail.value;\n          setItem(activeItem ?? undefined);\n        }}\n        ref={autoGridRef}\n        aria-controls={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      ></AutoGrid>\n      {/* As the toolbar only contains the \"New\" button at the moment, and as an empty toolbar\n          renders as a half-height bar, let's hide it completely when the button is hidden */}\n      {!noNewButton && (\n        <div className=\"auto-crud-toolbar\">\n          <Button theme=\"primary\" onClick={() => setItem(emptyItem)}>\n            + New\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n\n  const autoForm = (\n    <AutoForm\n      id={autoFormProps.id ?? `auto-form-${id ?? autoCrudId}`}\n      deleteButtonVisible={true}\n      {...autoFormProps}\n      disabled={!item}\n      service={service}\n      model={model}\n      itemIdProperty={itemIdProperty}\n      item={item}\n      onSubmitSuccess={({ item: submittedItem }) => {\n        if (fullScreen) {\n          setItem(undefined);\n        } else {\n          setItem(submittedItem);\n        }\n        refreshGrid();\n      }}\n      onDeleteSuccess={() => {\n        setItem(undefined);\n        refreshGrid();\n      }}\n    />\n  );\n\n  // If the \"New\" button is visible, the form is always shown.\n  // Otherwise, the form is only shown when an item is being edited.\n  return (\n    <div className={`auto-crud ${className ?? ''}`} id={id} style={style}>\n      {noNewButton && (!item || item === emptyItem) ? (\n        mainSection\n      ) : fullScreen ? (\n        <>\n          {mainSection}\n          <AutoCrudDialog opened={!!item} header={formHeader} onClose={handleCancel}>\n            {autoForm}\n          </AutoCrudDialog>\n        </>\n      ) : (\n        <SplitLayout theme=\"small\">\n          {mainSection}\n          <div className=\"auto-crud-form\">\n            <div className=\"auto-crud-form-header\">{formHeader}</div>\n            {autoForm}\n          </div>\n        </SplitLayout>\n      )}\n    </div>\n  );\n}\n", "import { Button } from '@vaadin/react-components/Button';\nimport { Dialog } from '@vaadin/react-components/Dialog';\nimport { Icon } from '@vaadin/react-components/Icon';\nimport type { JSX } from 'react';\n\n// eslint-disable-next-line\nimport '@vaadin/vaadin-lumo-styles/vaadin-iconset.js';\n\ninterface AutoCrudDialogProps {\n  header: JSX.Element | null | undefined;\n  children: React.ReactElement;\n  opened: boolean;\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  onClose: () => void;\n}\n\nexport function AutoCrudDialog(props: AutoCrudDialogProps): JSX.Element {\n  const { header, children, opened, onClose } = props;\n  return (\n    <Dialog\n      overlayClass=\"auto-crud-dialog\"\n      opened={opened}\n      headerRenderer={() => (\n        <div className=\"auto-crud-dialog-header\">\n          {header}\n          <Button theme=\"tertiary\" onClick={onClose} aria-label=\"Close\">\n            <Icon icon=\"lumo:cross\" style={{ height: 'var(--lumo-icon-size-l)', width: 'var(--lumo-icon-size-l)' }} />\n          </Button>\n        </div>\n      )}\n    >\n      {children}\n    </Dialog>\n  );\n}\n", "const css = new CSSStyleSheet();css.replaceSync(`.auto-crud{border:1px solid var(--lumo-contrast-20pct);display:flex;height:462px;overflow:hidden}.auto-crud>vaadin-split-layout{align-items:stretch;flex:1 1 100%}.auto-crud>vaadin-split-layout::part(splitter){border-left:1px solid var(--lumo-contrast-20pct);border-top:1px solid var(--lumo-contrast-20pct)}.auto-crud-main{display:flex;flex:1 1 100%;flex-direction:column;min-width:200px}.auto-crud-main>vaadin-grid{border:none;height:auto}.auto-crud-toolbar{align-items:baseline;background-color:var(--lumo-contrast-5pct);border-top:1px solid var(--lumo-contrast-10pct);display:flex;flex-shrink:0;justify-content:flex-end;padding:var(--lumo-space-s) var(--lumo-space-m)}.auto-crud-form{align-items:stretch;display:flex;flex-direction:column;min-width:300px;width:40%}.auto-crud .auto-crud-form:before{box-shadow:var(--lumo-box-shadow-s);content:\"\";height:100%;pointer-events:none;position:absolute;width:100%;z-index:1}.auto-crud-form-header{padding:var(--lumo-space-m) var(--lumo-space-m) var(--lumo-space-s) var(--lumo-space-m)}.auto-crud .auto-form,.auto-crud-dialog .auto-form{align-items:stretch;display:flex;flex:1 1 0;flex-direction:column}.auto-crud .auto-form-fields,.auto-crud-dialog .auto-form-fields{flex:1 1 0;min-height:0;overflow-y:auto;padding:0 var(--lumo-space-m)}.auto-crud .auto-form-toolbar,.auto-crud-dialog .auto-form-toolbar{background-color:var(--lumo-contrast-5pct);border-top:1px solid var(--lumo-contrast-10pct);flex:0 0 auto;padding:var(--lumo-space-s) var(--lumo-space-m)}.auto-crud-dialog{bottom:0;left:0;right:0;top:0}.auto-crud-dialog::part(overlay){border-radius:0;height:100%;width:100%}.auto-crud-dialog::part(content){padding:0}.auto-crud-dialog .auto-crud-dialog-header{align-items:center;display:flex;justify-content:space-between;width:100%}.auto-crud-dialog .auto-form{height:100%;width:100%}`);export default css;", "import { useEffect, useState } from 'react';\n\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(() => window.matchMedia(query).matches);\n\n  useEffect(() => {\n    const listener = (e: MediaQueryListEvent) => setMatches(e.matches);\n    const mediaQuery = window.matchMedia(query);\n    setMatches(mediaQuery.matches);\n    mediaQuery.addEventListener('change', listener);\n    return () => mediaQuery.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n}\n", "/* eslint-disable import/export */\nimport { AutoCrud as _AutoCrud } from './autocrud.js';\nimport { featureRegistration } from './util.js';\n\nexport * from './autocrud.js';\n\nexport const AutoCrud: typeof _AutoCrud = featureRegistration(_AutoCrud, 'AutoCrud');\n", "export * from './autogrid-feature.js';\nexport type * from './crud.js';\nexport * from './autoform-feature.js';\nexport * from './autocrud-feature.js';\nexport { useDataProvider, useGridDataProvider, useComboBoxDataProvider } from './data-provider.js';\n\n// @ts-expect-error: esbuild injection\n// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n((feature, vaadinObj = (window.Vaadin ??= {})) => {\n  vaadinObj.registrations ??= [];\n  vaadinObj.registrations.push({\n    is: feature ? `@vaadin/hilla-react-crud/${feature}` : '@vaadin/hilla-react-crud',\n    version: '24.7.2',\n  });\n})();\n"],
  "mappings": "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",
  "names": ["import_react", "import_react", "import_react", "_a", "_b", "_c", "import_react", "css", "feature", "props", "_jsx", "_jsx", "_Fragment", "o", "_a", "__classPrivateFieldSet", "__classPrivateFieldGet", "v", "_b", "_BinderNode_getChildBinderNodes", "_BinderNode_isArray", "_BinderNode_isArrayItem", "_BinderNode_isObject", "_BinderNode_requestValidationOfDescendants", "_BinderNode_requestValidationWithAncestors", "_BinderNode_runOwnValidators", "_BinderNode_setValueState", "__classPrivateFieldSet", "__classPrivateFieldGet", "_AbstractFieldStrategy_setEventHandler", "_AbstractFieldStrategy_detectValidityError", "e", "_a", "_VaadinFieldStrategy_onUnparsableChange", "fieldState", "e", "__classPrivateFieldSet", "__classPrivateFieldGet", "_a", "_b", "import_react", "Matcher", "_jsx", "_jsxs", "p", "e", "m", "_a", "k", "_Fragment", "import_react", "Direction", "NullHandling", "import_react", "_a", "_b", "_jsx", "_Fragment", "e", "_a", "p", "_a", "_jsx", "_b", "f", "AutoGrid", "import_react", "x: number", "convertFieldValue", "model: T", "fieldValue: unknown", "node: BinderNode<M>", "visited: boolean", "model: AbstractModel", "n", "element: HTMLElement | null", "_a", "_b", "Model: DetachedModelConstructor<M>", "config?: BinderConfiguration<Value<M>>", "field", "model: M", "import_react", "import_react", "field", "props", "p", "r", "k", "_jsx", "css", "_a", "_jsxs", "_jsx", "id", "p", "m", "_Fragment", "AutoForm", "import_react", "props", "_jsx", "_jsxs", "m", "css", "import_react", "matches", "e", "_jsx", "_a", "_jsxs", "e", "m", "_Fragment", "n", "AutoCrud"]
}
