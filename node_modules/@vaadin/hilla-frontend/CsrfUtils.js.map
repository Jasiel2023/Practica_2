{"mappings":"AAAA,OAAO,uCAAwC;;AAG/C,OAAO,MAAM,qBAAqB;;AAElC,OAAO,MAAM,0BAA0B;;AAEvC,OAAO,MAAM,0BAA0B;AAEvC,SAAS,0BAA0BA,SAAqD;AACtF,KAAI,SAAS;EACX,MAAM,QAAQ,QAAQ;AACtB,MAAI,SAAS,MAAM,aAAa,KAAK,aAAa;AAChD,UAAO;EACR;CACF;AACD,QAAO;AACR;;AAGD,SAAS,+BAA+BC,KAAmC;CACzE,MAAM,aAAa,IAAI,KAAK,cAA+B,8BAA4B;AACvF,QAAO,0BAA0B,WAAW;AAC7C;;AAGD,SAAS,8BAA8BA,KAAmC;CACxE,MAAM,YAAY,IAAI,KAAK,cAA+B,uBAAqB;AAC/E,QAAO,0BAA0B,UAAU;AAC5C;;AAGD,OAAO,SAAS,kBAAkBA,KAAuC;CACvE,MAAM,aAAa,+BAA+B,IAAI;CACtD,IAAI,OAAO,cAAc,IAAI,wBAAwB;AACrD,MAAK,QAAQ,KAAK,WAAW,GAAG;AAC9B,SAAO,8BAA8B,IAAI;CAC1C;CACD,MAAMC,UAAkC,CAAE;AAC1C,KAAI,QAAQ,YAAY;AACtB,UAAQ,QAAQ;AAEhB,UAAQ,eAAe;CACxB;AACD,QAAO;AACR;;AAGD,OAAO,SAAS,wCAAwCD,KAAuC;CAC7F,MAAM,WAAW,kBAAkB,IAAI;CACvC,MAAMC,UAAkC,CAAE;AAC1C,KAAI,SAAS,SAAS,SAAS,cAAc;AAC3C,UAAQ,SAAS,gBAAgB,SAAS;CAC3C;AACD,QAAO;AACR;;AAGD,OAAO,SAAS,sCAAsCD,KAAuC;CAC3F,MAAMC,UAAkC,CAAE;CAE1C,MAAM,WAAW,kBAAkB,IAAI;AACvC,KAAI,SAAS,SAAS,SAAS,cAAc;AAC3C,UAAQ,SAAS,gBAAgB,SAAS;CAC3C,OAAM;AACL,UAAQ,sBAAsB,cAAc,IAAI,wBAAwB,IAAI;CAC7E;AAED,QAAO;AACR","names":["element: HTMLMetaElement | null","doc: Document","headers: Record<string, string>"],"sources":["/opt/agent/work/1af72d8adc613024/hilla/packages/ts/frontend/src/CsrfUtils.ts"],"sourcesContent":["import CookieManager from './CookieManager.js';\n\n/** @internal */\nexport const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\n/** @internal */\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\n/** @internal */\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction extractContentFromMetaTag(element: HTMLMetaElement | null): string | undefined {\n  if (element) {\n    const value = element.content;\n    if (value && value.toLowerCase() !== 'undefined') {\n      return value;\n    }\n  }\n  return undefined;\n}\n\n/** @internal */\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string | undefined {\n  const csrfHeader = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf_header\"]');\n  return extractContentFromMetaTag(csrfHeader);\n}\n\n/** @internal */\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string | undefined {\n  const csrfToken = doc.head.querySelector<HTMLMetaElement>('meta[name=\"_csrf\"]');\n  return extractContentFromMetaTag(csrfToken);\n}\n\n/** @internal */\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = CookieManager.get(SPRING_CSRF_COOKIE_NAME);\n  if (!csrf || csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf && csrfHeader) {\n    headers._csrf = csrf;\n    // eslint-disable-next-line camelcase\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\n/** @internal */\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = CookieManager.get(VAADIN_CSRF_COOKIE_NAME) ?? '';\n  }\n\n  return headers;\n}\n"],"version":3}